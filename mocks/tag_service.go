// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/tag_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/emelnychenko/go-press/common"
	entities "github.com/emelnychenko/go-press/entities"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTagService is a mock of TagService interface
type MockTagService struct {
	ctrl     *gomock.Controller
	recorder *MockTagServiceMockRecorder
}

// MockTagServiceMockRecorder is the mock recorder for MockTagService
type MockTagServiceMockRecorder struct {
	mock *MockTagService
}

// NewMockTagService creates a new mock instance
func NewMockTagService(ctrl *gomock.Controller) *MockTagService {
	mock := &MockTagService{ctrl: ctrl}
	mock.recorder = &MockTagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTagService) EXPECT() *MockTagServiceMockRecorder {
	return m.recorder
}

// ListTags mocks base method
func (m *MockTagService) ListTags(tagPaginationQuery *models.TagPaginationQuery) (*models.PaginationResult, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", tagPaginationQuery)
	ret0, _ := ret[0].(*models.PaginationResult)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags
func (mr *MockTagServiceMockRecorder) ListTags(tagPaginationQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockTagService)(nil).ListTags), tagPaginationQuery)
}

// GetTag mocks base method
func (m *MockTagService) GetTag(tagId *models.TagId) (*entities.TagEntity, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", tagId)
	ret0, _ := ret[0].(*entities.TagEntity)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag
func (mr *MockTagServiceMockRecorder) GetTag(tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockTagService)(nil).GetTag), tagId)
}

// CreateTag mocks base method
func (m *MockTagService) CreateTag(data *models.TagCreate) (*entities.TagEntity, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", data)
	ret0, _ := ret[0].(*entities.TagEntity)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag
func (mr *MockTagServiceMockRecorder) CreateTag(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockTagService)(nil).CreateTag), data)
}

// UpdateTag mocks base method
func (m *MockTagService) UpdateTag(tagEntity *entities.TagEntity, data *models.TagUpdate) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", tagEntity, data)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// UpdateTag indicates an expected call of UpdateTag
func (mr *MockTagServiceMockRecorder) UpdateTag(tagEntity, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockTagService)(nil).UpdateTag), tagEntity, data)
}

// DeleteTag mocks base method
func (m *MockTagService) DeleteTag(tagEntity *entities.TagEntity) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", tagEntity)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag
func (mr *MockTagServiceMockRecorder) DeleteTag(tagEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockTagService)(nil).DeleteTag), tagEntity)
}
