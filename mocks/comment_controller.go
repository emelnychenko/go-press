// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/comment_controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/emelnychenko/go-press/common"
	contracts "github.com/emelnychenko/go-press/contracts"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommentController is a mock of CommentController interface
type MockCommentController struct {
	ctrl     *gomock.Controller
	recorder *MockCommentControllerMockRecorder
}

// MockCommentControllerMockRecorder is the mock recorder for MockCommentController
type MockCommentControllerMockRecorder struct {
	mock *MockCommentController
}

// NewMockCommentController creates a new mock instance
func NewMockCommentController(ctrl *gomock.Controller) *MockCommentController {
	mock := &MockCommentController{ctrl: ctrl}
	mock.recorder = &MockCommentControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommentController) EXPECT() *MockCommentControllerMockRecorder {
	return m.recorder
}

// ListComments mocks base method
func (m *MockCommentController) ListComments(httpContext contracts.HttpContext) (interface{}, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// ListComments indicates an expected call of ListComments
func (mr *MockCommentControllerMockRecorder) ListComments(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockCommentController)(nil).ListComments), httpContext)
}

// GetComment mocks base method
func (m *MockCommentController) GetComment(httpContext contracts.HttpContext) (interface{}, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment
func (mr *MockCommentControllerMockRecorder) GetComment(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockCommentController)(nil).GetComment), httpContext)
}

// CreateComment mocks base method
func (m *MockCommentController) CreateComment(httpContext contracts.HttpContext) (interface{}, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment
func (mr *MockCommentControllerMockRecorder) CreateComment(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentController)(nil).CreateComment), httpContext)
}

// UpdateComment mocks base method
func (m *MockCommentController) UpdateComment(httpContext contracts.HttpContext) (interface{}, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment
func (mr *MockCommentControllerMockRecorder) UpdateComment(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentController)(nil).UpdateComment), httpContext)
}

// DeleteComment mocks base method
func (m *MockCommentController) DeleteComment(httpContext contracts.HttpContext) (interface{}, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment
func (mr *MockCommentControllerMockRecorder) DeleteComment(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentController)(nil).DeleteComment), httpContext)
}
