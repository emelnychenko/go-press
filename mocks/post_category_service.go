// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/post_category_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "github.com/emelnychenko/go-press/entities"
	errors "github.com/emelnychenko/go-press/errors"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostCategoryService is a mock of PostCategoryService interface
type MockPostCategoryService struct {
	ctrl     *gomock.Controller
	recorder *MockPostCategoryServiceMockRecorder
}

// MockPostCategoryServiceMockRecorder is the mock recorder for MockPostCategoryService
type MockPostCategoryServiceMockRecorder struct {
	mock *MockPostCategoryService
}

// NewMockPostCategoryService creates a new mock instance
func NewMockPostCategoryService(ctrl *gomock.Controller) *MockPostCategoryService {
	mock := &MockPostCategoryService{ctrl: ctrl}
	mock.recorder = &MockPostCategoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostCategoryService) EXPECT() *MockPostCategoryServiceMockRecorder {
	return m.recorder
}

// ListPostCategories mocks base method
func (m *MockPostCategoryService) ListPostCategories(arg0 *entities.PostEntity, arg1 *models.CategoryPaginationQuery) (*models.PaginationResult, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostCategories", arg0, arg1)
	ret0, _ := ret[0].(*models.PaginationResult)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ListPostCategories indicates an expected call of ListPostCategories
func (mr *MockPostCategoryServiceMockRecorder) ListPostCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostCategories", reflect.TypeOf((*MockPostCategoryService)(nil).ListPostCategories), arg0, arg1)
}

// AddPostCategory mocks base method
func (m *MockPostCategoryService) AddPostCategory(arg0 *entities.PostEntity, arg1 *entities.CategoryEntity) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPostCategory", arg0, arg1)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// AddPostCategory indicates an expected call of AddPostCategory
func (mr *MockPostCategoryServiceMockRecorder) AddPostCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPostCategory", reflect.TypeOf((*MockPostCategoryService)(nil).AddPostCategory), arg0, arg1)
}

// RemovePostCategory mocks base method
func (m *MockPostCategoryService) RemovePostCategory(arg0 *entities.PostEntity, arg1 *entities.CategoryEntity) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePostCategory", arg0, arg1)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// RemovePostCategory indicates an expected call of RemovePostCategory
func (mr *MockPostCategoryServiceMockRecorder) RemovePostCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePostCategory", reflect.TypeOf((*MockPostCategoryService)(nil).RemovePostCategory), arg0, arg1)
}
