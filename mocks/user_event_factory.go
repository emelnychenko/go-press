// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/user_event_factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	contracts "github.com/emelnychenko/go-press/contracts"
	entities "github.com/emelnychenko/go-press/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserEventFactory is a mock of UserEventFactory interface
type MockUserEventFactory struct {
	ctrl     *gomock.Controller
	recorder *MockUserEventFactoryMockRecorder
}

// MockUserEventFactoryMockRecorder is the mock recorder for MockUserEventFactory
type MockUserEventFactoryMockRecorder struct {
	mock *MockUserEventFactory
}

// NewMockUserEventFactory creates a new mock instance
func NewMockUserEventFactory(ctrl *gomock.Controller) *MockUserEventFactory {
	mock := &MockUserEventFactory{ctrl: ctrl}
	mock.recorder = &MockUserEventFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserEventFactory) EXPECT() *MockUserEventFactoryMockRecorder {
	return m.recorder
}

// CreateUserCreatedEvent mocks base method
func (m *MockUserEventFactory) CreateUserCreatedEvent(userEntity *entities.UserEntity) contracts.UserEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserCreatedEvent", userEntity)
	ret0, _ := ret[0].(contracts.UserEvent)
	return ret0
}

// CreateUserCreatedEvent indicates an expected call of CreateUserCreatedEvent
func (mr *MockUserEventFactoryMockRecorder) CreateUserCreatedEvent(userEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserCreatedEvent", reflect.TypeOf((*MockUserEventFactory)(nil).CreateUserCreatedEvent), userEntity)
}

// CreateUserUpdatedEvent mocks base method
func (m *MockUserEventFactory) CreateUserUpdatedEvent(userEntity *entities.UserEntity) contracts.UserEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserUpdatedEvent", userEntity)
	ret0, _ := ret[0].(contracts.UserEvent)
	return ret0
}

// CreateUserUpdatedEvent indicates an expected call of CreateUserUpdatedEvent
func (mr *MockUserEventFactoryMockRecorder) CreateUserUpdatedEvent(userEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserUpdatedEvent", reflect.TypeOf((*MockUserEventFactory)(nil).CreateUserUpdatedEvent), userEntity)
}

// CreateUserVerifiedEvent mocks base method
func (m *MockUserEventFactory) CreateUserVerifiedEvent(userEntity *entities.UserEntity) contracts.UserEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserVerifiedEvent", userEntity)
	ret0, _ := ret[0].(contracts.UserEvent)
	return ret0
}

// CreateUserVerifiedEvent indicates an expected call of CreateUserVerifiedEvent
func (mr *MockUserEventFactoryMockRecorder) CreateUserVerifiedEvent(userEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserVerifiedEvent", reflect.TypeOf((*MockUserEventFactory)(nil).CreateUserVerifiedEvent), userEntity)
}

// CreateUserIdentityChangedEvent mocks base method
func (m *MockUserEventFactory) CreateUserIdentityChangedEvent(userEntity *entities.UserEntity) contracts.UserEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserIdentityChangedEvent", userEntity)
	ret0, _ := ret[0].(contracts.UserEvent)
	return ret0
}

// CreateUserIdentityChangedEvent indicates an expected call of CreateUserIdentityChangedEvent
func (mr *MockUserEventFactoryMockRecorder) CreateUserIdentityChangedEvent(userEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserIdentityChangedEvent", reflect.TypeOf((*MockUserEventFactory)(nil).CreateUserIdentityChangedEvent), userEntity)
}

// CreateUserPasswordChangedEvent mocks base method
func (m *MockUserEventFactory) CreateUserPasswordChangedEvent(userEntity *entities.UserEntity) contracts.UserEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPasswordChangedEvent", userEntity)
	ret0, _ := ret[0].(contracts.UserEvent)
	return ret0
}

// CreateUserPasswordChangedEvent indicates an expected call of CreateUserPasswordChangedEvent
func (mr *MockUserEventFactoryMockRecorder) CreateUserPasswordChangedEvent(userEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPasswordChangedEvent", reflect.TypeOf((*MockUserEventFactory)(nil).CreateUserPasswordChangedEvent), userEntity)
}

// CreateUserDeletedEvent mocks base method
func (m *MockUserEventFactory) CreateUserDeletedEvent(userEntity *entities.UserEntity) contracts.UserEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserDeletedEvent", userEntity)
	ret0, _ := ret[0].(contracts.UserEvent)
	return ret0
}

// CreateUserDeletedEvent indicates an expected call of CreateUserDeletedEvent
func (mr *MockUserEventFactoryMockRecorder) CreateUserDeletedEvent(userEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserDeletedEvent", reflect.TypeOf((*MockUserEventFactory)(nil).CreateUserDeletedEvent), userEntity)
}
