// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/content_type_validator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	errors "github.com/emelnychenko/go-press/errors"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockContentTypeValidator is a mock of ContentTypeValidator interface
type MockContentTypeValidator struct {
	ctrl     *gomock.Controller
	recorder *MockContentTypeValidatorMockRecorder
}

// MockContentTypeValidatorMockRecorder is the mock recorder for MockContentTypeValidator
type MockContentTypeValidatorMockRecorder struct {
	mock *MockContentTypeValidator
}

// NewMockContentTypeValidator creates a new mock instance
func NewMockContentTypeValidator(ctrl *gomock.Controller) *MockContentTypeValidator {
	mock := &MockContentTypeValidator{ctrl: ctrl}
	mock.recorder = &MockContentTypeValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContentTypeValidator) EXPECT() *MockContentTypeValidatorMockRecorder {
	return m.recorder
}

// ValidateImage mocks base method
func (m *MockContentTypeValidator) ValidateImage(contentType string) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateImage", contentType)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// ValidateImage indicates an expected call of ValidateImage
func (mr *MockContentTypeValidatorMockRecorder) ValidateImage(contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateImage", reflect.TypeOf((*MockContentTypeValidator)(nil).ValidateImage), contentType)
}

// ValidateVideo mocks base method
func (m *MockContentTypeValidator) ValidateVideo(contentType string) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVideo", contentType)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// ValidateVideo indicates an expected call of ValidateVideo
func (mr *MockContentTypeValidatorMockRecorder) ValidateVideo(contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVideo", reflect.TypeOf((*MockContentTypeValidator)(nil).ValidateVideo), contentType)
}

// ValidateAudio mocks base method
func (m *MockContentTypeValidator) ValidateAudio(contentType string) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAudio", contentType)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// ValidateAudio indicates an expected call of ValidateAudio
func (mr *MockContentTypeValidatorMockRecorder) ValidateAudio(contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAudio", reflect.TypeOf((*MockContentTypeValidator)(nil).ValidateAudio), contentType)
}
