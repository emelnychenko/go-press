// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/tag_http_helper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/emelnychenko/go-press/common"
	contracts "github.com/emelnychenko/go-press/contracts"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTagHttpHelper is a mock of TagHttpHelper interface
type MockTagHttpHelper struct {
	ctrl     *gomock.Controller
	recorder *MockTagHttpHelperMockRecorder
}

// MockTagHttpHelperMockRecorder is the mock recorder for MockTagHttpHelper
type MockTagHttpHelperMockRecorder struct {
	mock *MockTagHttpHelper
}

// NewMockTagHttpHelper creates a new mock instance
func NewMockTagHttpHelper(ctrl *gomock.Controller) *MockTagHttpHelper {
	mock := &MockTagHttpHelper{ctrl: ctrl}
	mock.recorder = &MockTagHttpHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTagHttpHelper) EXPECT() *MockTagHttpHelperMockRecorder {
	return m.recorder
}

// ParseTagId mocks base method
func (m *MockTagHttpHelper) ParseTagId(httpContext contracts.HttpContext) (*models.TagId, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTagId", httpContext)
	ret0, _ := ret[0].(*models.TagId)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// ParseTagId indicates an expected call of ParseTagId
func (mr *MockTagHttpHelperMockRecorder) ParseTagId(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTagId", reflect.TypeOf((*MockTagHttpHelper)(nil).ParseTagId), httpContext)
}
