// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/post_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/emelnychenko/go-press/common"
	entities "github.com/emelnychenko/go-press/entities"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostRepository is a mock of PostRepository interface
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// ListPosts mocks base method
func (m *MockPostRepository) ListPosts() ([]*entities.PostEntity, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPosts")
	ret0, _ := ret[0].([]*entities.PostEntity)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts
func (mr *MockPostRepositoryMockRecorder) ListPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockPostRepository)(nil).ListPosts))
}

// GetPost mocks base method
func (m *MockPostRepository) GetPost(postId *models.PostId) (*entities.PostEntity, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", postId)
	ret0, _ := ret[0].(*entities.PostEntity)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost
func (mr *MockPostRepositoryMockRecorder) GetPost(postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostRepository)(nil).GetPost), postId)
}

// SavePost mocks base method
func (m *MockPostRepository) SavePost(postEntity *entities.PostEntity) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePost", postEntity)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// SavePost indicates an expected call of SavePost
func (mr *MockPostRepositoryMockRecorder) SavePost(postEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePost", reflect.TypeOf((*MockPostRepository)(nil).SavePost), postEntity)
}

// RemovePost mocks base method
func (m *MockPostRepository) RemovePost(postEntity *entities.PostEntity) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePost", postEntity)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// RemovePost indicates an expected call of RemovePost
func (mr *MockPostRepositoryMockRecorder) RemovePost(postEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePost", reflect.TypeOf((*MockPostRepository)(nil).RemovePost), postEntity)
}
