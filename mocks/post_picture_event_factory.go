// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/post_picture_event_factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	contracts "github.com/emelnychenko/go-press/contracts"
	entities "github.com/emelnychenko/go-press/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostPictureEventFactory is a mock of PostPictureEventFactory interface
type MockPostPictureEventFactory struct {
	ctrl     *gomock.Controller
	recorder *MockPostPictureEventFactoryMockRecorder
}

// MockPostPictureEventFactoryMockRecorder is the mock recorder for MockPostPictureEventFactory
type MockPostPictureEventFactoryMockRecorder struct {
	mock *MockPostPictureEventFactory
}

// NewMockPostPictureEventFactory creates a new mock instance
func NewMockPostPictureEventFactory(ctrl *gomock.Controller) *MockPostPictureEventFactory {
	mock := &MockPostPictureEventFactory{ctrl: ctrl}
	mock.recorder = &MockPostPictureEventFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostPictureEventFactory) EXPECT() *MockPostPictureEventFactoryMockRecorder {
	return m.recorder
}

// CreatePostPictureChangedEvent mocks base method
func (m *MockPostPictureEventFactory) CreatePostPictureChangedEvent(postEntity *entities.PostEntity, postPictureEntity *entities.FileEntity) contracts.PostPictureEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostPictureChangedEvent", postEntity, postPictureEntity)
	ret0, _ := ret[0].(contracts.PostPictureEvent)
	return ret0
}

// CreatePostPictureChangedEvent indicates an expected call of CreatePostPictureChangedEvent
func (mr *MockPostPictureEventFactoryMockRecorder) CreatePostPictureChangedEvent(postEntity, postPictureEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostPictureChangedEvent", reflect.TypeOf((*MockPostPictureEventFactory)(nil).CreatePostPictureChangedEvent), postEntity, postPictureEntity)
}

// CreatePostPictureRemovedEvent mocks base method
func (m *MockPostPictureEventFactory) CreatePostPictureRemovedEvent(postEntity *entities.PostEntity) contracts.PostPictureEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostPictureRemovedEvent", postEntity)
	ret0, _ := ret[0].(contracts.PostPictureEvent)
	return ret0
}

// CreatePostPictureRemovedEvent indicates an expected call of CreatePostPictureRemovedEvent
func (mr *MockPostPictureEventFactoryMockRecorder) CreatePostPictureRemovedEvent(postEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostPictureRemovedEvent", reflect.TypeOf((*MockPostPictureEventFactory)(nil).CreatePostPictureRemovedEvent), postEntity)
}
