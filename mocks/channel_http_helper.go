// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/channel_http_helper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	contracts "github.com/emelnychenko/go-press/contracts"
	errors "github.com/emelnychenko/go-press/errors"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChannelHttpHelper is a mock of ChannelHttpHelper interface
type MockChannelHttpHelper struct {
	ctrl     *gomock.Controller
	recorder *MockChannelHttpHelperMockRecorder
}

// MockChannelHttpHelperMockRecorder is the mock recorder for MockChannelHttpHelper
type MockChannelHttpHelperMockRecorder struct {
	mock *MockChannelHttpHelper
}

// NewMockChannelHttpHelper creates a new mock instance
func NewMockChannelHttpHelper(ctrl *gomock.Controller) *MockChannelHttpHelper {
	mock := &MockChannelHttpHelper{ctrl: ctrl}
	mock.recorder = &MockChannelHttpHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChannelHttpHelper) EXPECT() *MockChannelHttpHelperMockRecorder {
	return m.recorder
}

// ParseChannelId mocks base method
func (m *MockChannelHttpHelper) ParseChannelId(httpContext contracts.HttpContext) (*models.ChannelId, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseChannelId", httpContext)
	ret0, _ := ret[0].(*models.ChannelId)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ParseChannelId indicates an expected call of ParseChannelId
func (mr *MockChannelHttpHelperMockRecorder) ParseChannelId(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseChannelId", reflect.TypeOf((*MockChannelHttpHelper)(nil).ParseChannelId), httpContext)
}
