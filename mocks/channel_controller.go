// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/channel_controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/emelnychenko/go-press/common"
	contracts "github.com/emelnychenko/go-press/contracts"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChannelController is a mock of ChannelController interface
type MockChannelController struct {
	ctrl     *gomock.Controller
	recorder *MockChannelControllerMockRecorder
}

// MockChannelControllerMockRecorder is the mock recorder for MockChannelController
type MockChannelControllerMockRecorder struct {
	mock *MockChannelController
}

// NewMockChannelController creates a new mock instance
func NewMockChannelController(ctrl *gomock.Controller) *MockChannelController {
	mock := &MockChannelController{ctrl: ctrl}
	mock.recorder = &MockChannelControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChannelController) EXPECT() *MockChannelControllerMockRecorder {
	return m.recorder
}

// ListChannels mocks base method
func (m *MockChannelController) ListChannels(httpContext contracts.HttpContext) (interface{}, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannels", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// ListChannels indicates an expected call of ListChannels
func (mr *MockChannelControllerMockRecorder) ListChannels(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannels", reflect.TypeOf((*MockChannelController)(nil).ListChannels), httpContext)
}

// GetChannel mocks base method
func (m *MockChannelController) GetChannel(httpContext contracts.HttpContext) (interface{}, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel
func (mr *MockChannelControllerMockRecorder) GetChannel(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockChannelController)(nil).GetChannel), httpContext)
}

// CreateChannel mocks base method
func (m *MockChannelController) CreateChannel(httpContext contracts.HttpContext) (interface{}, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel
func (mr *MockChannelControllerMockRecorder) CreateChannel(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockChannelController)(nil).CreateChannel), httpContext)
}

// UpdateChannel mocks base method
func (m *MockChannelController) UpdateChannel(httpContext contracts.HttpContext) (interface{}, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// UpdateChannel indicates an expected call of UpdateChannel
func (mr *MockChannelControllerMockRecorder) UpdateChannel(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockChannelController)(nil).UpdateChannel), httpContext)
}

// DeleteChannel mocks base method
func (m *MockChannelController) DeleteChannel(httpContext contracts.HttpContext) (interface{}, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// DeleteChannel indicates an expected call of DeleteChannel
func (mr *MockChannelControllerMockRecorder) DeleteChannel(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockChannelController)(nil).DeleteChannel), httpContext)
}
