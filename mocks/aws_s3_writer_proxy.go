// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/aws_s3_writer_proxy.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockAwsS3WriterProxy is a mock of AwsS3WriterProxy interface
type MockAwsS3WriterProxy struct {
	ctrl     *gomock.Controller
	recorder *MockAwsS3WriterProxyMockRecorder
}

// MockAwsS3WriterProxyMockRecorder is the mock recorder for MockAwsS3WriterProxy
type MockAwsS3WriterProxyMockRecorder struct {
	mock *MockAwsS3WriterProxy
}

// NewMockAwsS3WriterProxy creates a new mock instance
func NewMockAwsS3WriterProxy(ctrl *gomock.Controller) *MockAwsS3WriterProxy {
	mock := &MockAwsS3WriterProxy{ctrl: ctrl}
	mock.recorder = &MockAwsS3WriterProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAwsS3WriterProxy) EXPECT() *MockAwsS3WriterProxyMockRecorder {
	return m.recorder
}

// WriteAt mocks base method
func (m *MockAwsS3WriterProxy) WriteAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAt indicates an expected call of WriteAt
func (mr *MockAwsS3WriterProxyMockRecorder) WriteAt(p, off interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAt", reflect.TypeOf((*MockAwsS3WriterProxy)(nil).WriteAt), p, off)
}

// Writer mocks base method
func (m *MockAwsS3WriterProxy) Writer() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Writer")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// Writer indicates an expected call of Writer
func (mr *MockAwsS3WriterProxyMockRecorder) Writer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writer", reflect.TypeOf((*MockAwsS3WriterProxy)(nil).Writer))
}
