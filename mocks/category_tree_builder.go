// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/category_tree_builder.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "github.com/emelnychenko/go-press/entities"
	errors "github.com/emelnychenko/go-press/errors"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCategoryTreeBuilder is a mock of CategoryTreeBuilder interface
type MockCategoryTreeBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryTreeBuilderMockRecorder
}

// MockCategoryTreeBuilderMockRecorder is the mock recorder for MockCategoryTreeBuilder
type MockCategoryTreeBuilderMockRecorder struct {
	mock *MockCategoryTreeBuilder
}

// NewMockCategoryTreeBuilder creates a new mock instance
func NewMockCategoryTreeBuilder(ctrl *gomock.Controller) *MockCategoryTreeBuilder {
	mock := &MockCategoryTreeBuilder{ctrl: ctrl}
	mock.recorder = &MockCategoryTreeBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCategoryTreeBuilder) EXPECT() *MockCategoryTreeBuilderMockRecorder {
	return m.recorder
}

// BuildCategoryEntityTree mocks base method
func (m *MockCategoryTreeBuilder) BuildCategoryEntityTree(categoryEntities []*entities.CategoryEntity) (*entities.CategoryEntityTree, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildCategoryEntityTree", categoryEntities)
	ret0, _ := ret[0].(*entities.CategoryEntityTree)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// BuildCategoryEntityTree indicates an expected call of BuildCategoryEntityTree
func (mr *MockCategoryTreeBuilderMockRecorder) BuildCategoryEntityTree(categoryEntities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildCategoryEntityTree", reflect.TypeOf((*MockCategoryTreeBuilder)(nil).BuildCategoryEntityTree), categoryEntities)
}
