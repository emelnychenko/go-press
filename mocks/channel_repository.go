// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/channel_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/emelnychenko/go-press/common"
	entities "github.com/emelnychenko/go-press/entities"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChannelRepository is a mock of ChannelRepository interface
type MockChannelRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChannelRepositoryMockRecorder
}

// MockChannelRepositoryMockRecorder is the mock recorder for MockChannelRepository
type MockChannelRepositoryMockRecorder struct {
	mock *MockChannelRepository
}

// NewMockChannelRepository creates a new mock instance
func NewMockChannelRepository(ctrl *gomock.Controller) *MockChannelRepository {
	mock := &MockChannelRepository{ctrl: ctrl}
	mock.recorder = &MockChannelRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChannelRepository) EXPECT() *MockChannelRepositoryMockRecorder {
	return m.recorder
}

// ListChannels mocks base method
func (m *MockChannelRepository) ListChannels(channelPaginationQuery *models.ChannelPaginationQuery) (*models.PaginationResult, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannels", channelPaginationQuery)
	ret0, _ := ret[0].(*models.PaginationResult)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// ListChannels indicates an expected call of ListChannels
func (mr *MockChannelRepositoryMockRecorder) ListChannels(channelPaginationQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannels", reflect.TypeOf((*MockChannelRepository)(nil).ListChannels), channelPaginationQuery)
}

// GetChannel mocks base method
func (m *MockChannelRepository) GetChannel(channelId *models.ChannelId) (*entities.ChannelEntity, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", channelId)
	ret0, _ := ret[0].(*entities.ChannelEntity)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel
func (mr *MockChannelRepositoryMockRecorder) GetChannel(channelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockChannelRepository)(nil).GetChannel), channelId)
}

// SaveChannel mocks base method
func (m *MockChannelRepository) SaveChannel(channelEntity *entities.ChannelEntity) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveChannel", channelEntity)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// SaveChannel indicates an expected call of SaveChannel
func (mr *MockChannelRepositoryMockRecorder) SaveChannel(channelEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveChannel", reflect.TypeOf((*MockChannelRepository)(nil).SaveChannel), channelEntity)
}

// RemoveChannel mocks base method
func (m *MockChannelRepository) RemoveChannel(channelEntity *entities.ChannelEntity) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveChannel", channelEntity)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// RemoveChannel indicates an expected call of RemoveChannel
func (mr *MockChannelRepositoryMockRecorder) RemoveChannel(channelEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveChannel", reflect.TypeOf((*MockChannelRepository)(nil).RemoveChannel), channelEntity)
}
