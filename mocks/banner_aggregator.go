// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/banner_aggregator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "github.com/emelnychenko/go-press/entities"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBannerAggregator is a mock of BannerAggregator interface
type MockBannerAggregator struct {
	ctrl     *gomock.Controller
	recorder *MockBannerAggregatorMockRecorder
}

// MockBannerAggregatorMockRecorder is the mock recorder for MockBannerAggregator
type MockBannerAggregatorMockRecorder struct {
	mock *MockBannerAggregator
}

// NewMockBannerAggregator creates a new mock instance
func NewMockBannerAggregator(ctrl *gomock.Controller) *MockBannerAggregator {
	mock := &MockBannerAggregator{ctrl: ctrl}
	mock.recorder = &MockBannerAggregatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBannerAggregator) EXPECT() *MockBannerAggregatorMockRecorder {
	return m.recorder
}

// AggregateBanner mocks base method
func (m *MockBannerAggregator) AggregateBanner(bannerEntity *entities.BannerEntity) *models.Banner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateBanner", bannerEntity)
	ret0, _ := ret[0].(*models.Banner)
	return ret0
}

// AggregateBanner indicates an expected call of AggregateBanner
func (mr *MockBannerAggregatorMockRecorder) AggregateBanner(bannerEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateBanner", reflect.TypeOf((*MockBannerAggregator)(nil).AggregateBanner), bannerEntity)
}

// AggregateBanners mocks base method
func (m *MockBannerAggregator) AggregateBanners(bannerEntities []*entities.BannerEntity) []*models.Banner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateBanners", bannerEntities)
	ret0, _ := ret[0].([]*models.Banner)
	return ret0
}

// AggregateBanners indicates an expected call of AggregateBanners
func (mr *MockBannerAggregatorMockRecorder) AggregateBanners(bannerEntities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateBanners", reflect.TypeOf((*MockBannerAggregator)(nil).AggregateBanners), bannerEntities)
}

// AggregatePaginationResult mocks base method
func (m *MockBannerAggregator) AggregatePaginationResult(entityPaginationResult *models.PaginationResult) *models.PaginationResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregatePaginationResult", entityPaginationResult)
	ret0, _ := ret[0].(*models.PaginationResult)
	return ret0
}

// AggregatePaginationResult indicates an expected call of AggregatePaginationResult
func (mr *MockBannerAggregatorMockRecorder) AggregatePaginationResult(entityPaginationResult interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatePaginationResult", reflect.TypeOf((*MockBannerAggregator)(nil).AggregatePaginationResult), entityPaginationResult)
}
