// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/file_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/emelnychenko/go-press/common"
	entities "github.com/emelnychenko/go-press/entities"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFileRepository is a mock of FileRepository interface
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// ListFiles mocks base method
func (m *MockFileRepository) ListFiles(filePaginationQuery *models.FilePaginationQuery) (*models.PaginationResult, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", filePaginationQuery)
	ret0, _ := ret[0].(*models.PaginationResult)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles
func (mr *MockFileRepositoryMockRecorder) ListFiles(filePaginationQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockFileRepository)(nil).ListFiles), filePaginationQuery)
}

// GetFile mocks base method
func (m *MockFileRepository) GetFile(fileId *models.FileId) (*entities.FileEntity, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", fileId)
	ret0, _ := ret[0].(*entities.FileEntity)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile
func (mr *MockFileRepositoryMockRecorder) GetFile(fileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockFileRepository)(nil).GetFile), fileId)
}

// SaveFile mocks base method
func (m *MockFileRepository) SaveFile(fileEntity *entities.FileEntity) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", fileEntity)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile
func (mr *MockFileRepositoryMockRecorder) SaveFile(fileEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockFileRepository)(nil).SaveFile), fileEntity)
}

// RemoveFile mocks base method
func (m *MockFileRepository) RemoveFile(fileEntity *entities.FileEntity) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFile", fileEntity)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// RemoveFile indicates an expected call of RemoveFile
func (mr *MockFileRepositoryMockRecorder) RemoveFile(fileEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFile", reflect.TypeOf((*MockFileRepository)(nil).RemoveFile), fileEntity)
}
