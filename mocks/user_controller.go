// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/user_controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	contracts "github.com/emelnychenko/go-press/contracts"
	errors "github.com/emelnychenko/go-press/errors"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserController is a mock of UserController interface
type MockUserController struct {
	ctrl     *gomock.Controller
	recorder *MockUserControllerMockRecorder
}

// MockUserControllerMockRecorder is the mock recorder for MockUserController
type MockUserControllerMockRecorder struct {
	mock *MockUserController
}

// NewMockUserController creates a new mock instance
func NewMockUserController(ctrl *gomock.Controller) *MockUserController {
	mock := &MockUserController{ctrl: ctrl}
	mock.recorder = &MockUserControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserController) EXPECT() *MockUserControllerMockRecorder {
	return m.recorder
}

// ListUsers mocks base method
func (m *MockUserController) ListUsers(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers
func (mr *MockUserControllerMockRecorder) ListUsers(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserController)(nil).ListUsers), httpContext)
}

// GetUser mocks base method
func (m *MockUserController) GetUser(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserControllerMockRecorder) GetUser(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserController)(nil).GetUser), httpContext)
}

// CreateUser mocks base method
func (m *MockUserController) CreateUser(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockUserControllerMockRecorder) CreateUser(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserController)(nil).CreateUser), httpContext)
}

// UpdateUser mocks base method
func (m *MockUserController) UpdateUser(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockUserControllerMockRecorder) UpdateUser(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserController)(nil).UpdateUser), httpContext)
}

// ChangeUserIdentity mocks base method
func (m *MockUserController) ChangeUserIdentity(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserIdentity", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ChangeUserIdentity indicates an expected call of ChangeUserIdentity
func (mr *MockUserControllerMockRecorder) ChangeUserIdentity(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserIdentity", reflect.TypeOf((*MockUserController)(nil).ChangeUserIdentity), httpContext)
}

// ChangeUserPassword mocks base method
func (m *MockUserController) ChangeUserPassword(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPassword", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ChangeUserPassword indicates an expected call of ChangeUserPassword
func (mr *MockUserControllerMockRecorder) ChangeUserPassword(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword", reflect.TypeOf((*MockUserController)(nil).ChangeUserPassword), httpContext)
}

// DeleteUser mocks base method
func (m *MockUserController) DeleteUser(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockUserControllerMockRecorder) DeleteUser(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserController)(nil).DeleteUser), httpContext)
}
