// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/post_controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	contracts "github.com/emelnychenko/go-press/contracts"
	errors "github.com/emelnychenko/go-press/errors"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostController is a mock of PostController interface
type MockPostController struct {
	ctrl     *gomock.Controller
	recorder *MockPostControllerMockRecorder
}

// MockPostControllerMockRecorder is the mock recorder for MockPostController
type MockPostControllerMockRecorder struct {
	mock *MockPostController
}

// NewMockPostController creates a new mock instance
func NewMockPostController(ctrl *gomock.Controller) *MockPostController {
	mock := &MockPostController{ctrl: ctrl}
	mock.recorder = &MockPostControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostController) EXPECT() *MockPostControllerMockRecorder {
	return m.recorder
}

// ListPosts mocks base method
func (m *MockPostController) ListPosts(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPosts", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts
func (mr *MockPostControllerMockRecorder) ListPosts(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockPostController)(nil).ListPosts), httpContext)
}

// GetPost mocks base method
func (m *MockPostController) GetPost(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost
func (mr *MockPostControllerMockRecorder) GetPost(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostController)(nil).GetPost), httpContext)
}

// CreatePost mocks base method
func (m *MockPostController) CreatePost(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost
func (mr *MockPostControllerMockRecorder) CreatePost(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostController)(nil).CreatePost), httpContext)
}

// UpdatePost mocks base method
func (m *MockPostController) UpdatePost(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost
func (mr *MockPostControllerMockRecorder) UpdatePost(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostController)(nil).UpdatePost), httpContext)
}

// DeletePost mocks base method
func (m *MockPostController) DeletePost(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost
func (mr *MockPostControllerMockRecorder) DeletePost(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostController)(nil).DeletePost), httpContext)
}
