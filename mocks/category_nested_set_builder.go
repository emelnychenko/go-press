// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/category_nested_set_builder.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "github.com/emelnychenko/go-press/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCategoryNestedSetBuilder is a mock of CategoryNestedSetBuilder interface
type MockCategoryNestedSetBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryNestedSetBuilderMockRecorder
}

// MockCategoryNestedSetBuilderMockRecorder is the mock recorder for MockCategoryNestedSetBuilder
type MockCategoryNestedSetBuilderMockRecorder struct {
	mock *MockCategoryNestedSetBuilder
}

// NewMockCategoryNestedSetBuilder creates a new mock instance
func NewMockCategoryNestedSetBuilder(ctrl *gomock.Controller) *MockCategoryNestedSetBuilder {
	mock := &MockCategoryNestedSetBuilder{ctrl: ctrl}
	mock.recorder = &MockCategoryNestedSetBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCategoryNestedSetBuilder) EXPECT() *MockCategoryNestedSetBuilderMockRecorder {
	return m.recorder
}

// BuildCategoryEntityNestedSet mocks base method
func (m *MockCategoryNestedSetBuilder) BuildCategoryEntityNestedSet(categoryEntities []*entities.CategoryEntity) *entities.CategoryEntityNestedSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildCategoryEntityNestedSet", categoryEntities)
	ret0, _ := ret[0].(*entities.CategoryEntityNestedSet)
	return ret0
}

// BuildCategoryEntityNestedSet indicates an expected call of BuildCategoryEntityNestedSet
func (mr *MockCategoryNestedSetBuilderMockRecorder) BuildCategoryEntityNestedSet(categoryEntities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildCategoryEntityNestedSet", reflect.TypeOf((*MockCategoryNestedSetBuilder)(nil).BuildCategoryEntityNestedSet), categoryEntities)
}

// BuildCategoryEntityNestedSetFromTree mocks base method
func (m *MockCategoryNestedSetBuilder) BuildCategoryEntityNestedSetFromTree(categoryEntityTree *entities.CategoryEntityTree) *entities.CategoryEntityNestedSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildCategoryEntityNestedSetFromTree", categoryEntityTree)
	ret0, _ := ret[0].(*entities.CategoryEntityNestedSet)
	return ret0
}

// BuildCategoryEntityNestedSetFromTree indicates an expected call of BuildCategoryEntityNestedSetFromTree
func (mr *MockCategoryNestedSetBuilderMockRecorder) BuildCategoryEntityNestedSetFromTree(categoryEntityTree interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildCategoryEntityNestedSetFromTree", reflect.TypeOf((*MockCategoryNestedSetBuilder)(nil).BuildCategoryEntityNestedSetFromTree), categoryEntityTree)
}
