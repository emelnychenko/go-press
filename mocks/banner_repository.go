// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/banner_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/emelnychenko/go-press/common"
	entities "github.com/emelnychenko/go-press/entities"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBannerRepository is a mock of BannerRepository interface
type MockBannerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBannerRepositoryMockRecorder
}

// MockBannerRepositoryMockRecorder is the mock recorder for MockBannerRepository
type MockBannerRepositoryMockRecorder struct {
	mock *MockBannerRepository
}

// NewMockBannerRepository creates a new mock instance
func NewMockBannerRepository(ctrl *gomock.Controller) *MockBannerRepository {
	mock := &MockBannerRepository{ctrl: ctrl}
	mock.recorder = &MockBannerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBannerRepository) EXPECT() *MockBannerRepositoryMockRecorder {
	return m.recorder
}

// ListBanners mocks base method
func (m *MockBannerRepository) ListBanners(bannerPaginationQuery *models.BannerPaginationQuery) (*models.PaginationResult, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBanners", bannerPaginationQuery)
	ret0, _ := ret[0].(*models.PaginationResult)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// ListBanners indicates an expected call of ListBanners
func (mr *MockBannerRepositoryMockRecorder) ListBanners(bannerPaginationQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBanners", reflect.TypeOf((*MockBannerRepository)(nil).ListBanners), bannerPaginationQuery)
}

// GetBanner mocks base method
func (m *MockBannerRepository) GetBanner(bannerId *models.BannerId) (*entities.BannerEntity, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanner", bannerId)
	ret0, _ := ret[0].(*entities.BannerEntity)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetBanner indicates an expected call of GetBanner
func (mr *MockBannerRepositoryMockRecorder) GetBanner(bannerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanner", reflect.TypeOf((*MockBannerRepository)(nil).GetBanner), bannerId)
}

// SaveBanner mocks base method
func (m *MockBannerRepository) SaveBanner(bannerEntity *entities.BannerEntity) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBanner", bannerEntity)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// SaveBanner indicates an expected call of SaveBanner
func (mr *MockBannerRepositoryMockRecorder) SaveBanner(bannerEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBanner", reflect.TypeOf((*MockBannerRepository)(nil).SaveBanner), bannerEntity)
}

// RemoveBanner mocks base method
func (m *MockBannerRepository) RemoveBanner(bannerEntity *entities.BannerEntity) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBanner", bannerEntity)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// RemoveBanner indicates an expected call of RemoveBanner
func (mr *MockBannerRepositoryMockRecorder) RemoveBanner(bannerEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBanner", reflect.TypeOf((*MockBannerRepository)(nil).RemoveBanner), bannerEntity)
}
