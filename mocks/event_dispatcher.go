// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/event_dispatcher.go

// Package mocks is a generated GoMock package.
package mocks

import (
	contracts "github.com/emelnychenko/go-press/contracts"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEventDispatcher is a mock of EventDispatcher interface
type MockEventDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockEventDispatcherMockRecorder
}

// MockEventDispatcherMockRecorder is the mock recorder for MockEventDispatcher
type MockEventDispatcherMockRecorder struct {
	mock *MockEventDispatcher
}

// NewMockEventDispatcher creates a new mock instance
func NewMockEventDispatcher(ctrl *gomock.Controller) *MockEventDispatcher {
	mock := &MockEventDispatcher{ctrl: ctrl}
	mock.recorder = &MockEventDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventDispatcher) EXPECT() *MockEventDispatcherMockRecorder {
	return m.recorder
}

// Dispatch mocks base method
func (m *MockEventDispatcher) Dispatch(event contracts.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispatch", event)
}

// Dispatch indicates an expected call of Dispatch
func (mr *MockEventDispatcherMockRecorder) Dispatch(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockEventDispatcher)(nil).Dispatch), event)
}

// Subscribe mocks base method
func (m *MockEventDispatcher) Subscribe(eventName string, eventSubscriberFunc contracts.EventSubscriberFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", eventName, eventSubscriberFunc)
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockEventDispatcherMockRecorder) Subscribe(eventName, eventSubscriberFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEventDispatcher)(nil).Subscribe), eventName, eventSubscriberFunc)
}
