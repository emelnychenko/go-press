// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/banner_model_factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBannerModelFactory is a mock of BannerModelFactory interface
type MockBannerModelFactory struct {
	ctrl     *gomock.Controller
	recorder *MockBannerModelFactoryMockRecorder
}

// MockBannerModelFactoryMockRecorder is the mock recorder for MockBannerModelFactory
type MockBannerModelFactoryMockRecorder struct {
	mock *MockBannerModelFactory
}

// NewMockBannerModelFactory creates a new mock instance
func NewMockBannerModelFactory(ctrl *gomock.Controller) *MockBannerModelFactory {
	mock := &MockBannerModelFactory{ctrl: ctrl}
	mock.recorder = &MockBannerModelFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBannerModelFactory) EXPECT() *MockBannerModelFactoryMockRecorder {
	return m.recorder
}

// CreateBannerPaginationQuery mocks base method
func (m *MockBannerModelFactory) CreateBannerPaginationQuery() *models.BannerPaginationQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBannerPaginationQuery")
	ret0, _ := ret[0].(*models.BannerPaginationQuery)
	return ret0
}

// CreateBannerPaginationQuery indicates an expected call of CreateBannerPaginationQuery
func (mr *MockBannerModelFactoryMockRecorder) CreateBannerPaginationQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBannerPaginationQuery", reflect.TypeOf((*MockBannerModelFactory)(nil).CreateBannerPaginationQuery))
}

// CreateBanner mocks base method
func (m *MockBannerModelFactory) CreateBanner() *models.Banner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBanner")
	ret0, _ := ret[0].(*models.Banner)
	return ret0
}

// CreateBanner indicates an expected call of CreateBanner
func (mr *MockBannerModelFactoryMockRecorder) CreateBanner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBanner", reflect.TypeOf((*MockBannerModelFactory)(nil).CreateBanner))
}

// CreateBannerCreate mocks base method
func (m *MockBannerModelFactory) CreateBannerCreate() *models.BannerCreate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBannerCreate")
	ret0, _ := ret[0].(*models.BannerCreate)
	return ret0
}

// CreateBannerCreate indicates an expected call of CreateBannerCreate
func (mr *MockBannerModelFactoryMockRecorder) CreateBannerCreate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBannerCreate", reflect.TypeOf((*MockBannerModelFactory)(nil).CreateBannerCreate))
}

// CreateBannerUpdate mocks base method
func (m *MockBannerModelFactory) CreateBannerUpdate() *models.BannerUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBannerUpdate")
	ret0, _ := ret[0].(*models.BannerUpdate)
	return ret0
}

// CreateBannerUpdate indicates an expected call of CreateBannerUpdate
func (mr *MockBannerModelFactoryMockRecorder) CreateBannerUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBannerUpdate", reflect.TypeOf((*MockBannerModelFactory)(nil).CreateBannerUpdate))
}
