// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/comment_event_factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	contracts "github.com/emelnychenko/go-press/contracts"
	entities "github.com/emelnychenko/go-press/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommentEventFactory is a mock of CommentEventFactory interface
type MockCommentEventFactory struct {
	ctrl     *gomock.Controller
	recorder *MockCommentEventFactoryMockRecorder
}

// MockCommentEventFactoryMockRecorder is the mock recorder for MockCommentEventFactory
type MockCommentEventFactoryMockRecorder struct {
	mock *MockCommentEventFactory
}

// NewMockCommentEventFactory creates a new mock instance
func NewMockCommentEventFactory(ctrl *gomock.Controller) *MockCommentEventFactory {
	mock := &MockCommentEventFactory{ctrl: ctrl}
	mock.recorder = &MockCommentEventFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommentEventFactory) EXPECT() *MockCommentEventFactoryMockRecorder {
	return m.recorder
}

// CreateCommentCreatedEvent mocks base method
func (m *MockCommentEventFactory) CreateCommentCreatedEvent(commentEntity *entities.CommentEntity) contracts.CommentEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentCreatedEvent", commentEntity)
	ret0, _ := ret[0].(contracts.CommentEvent)
	return ret0
}

// CreateCommentCreatedEvent indicates an expected call of CreateCommentCreatedEvent
func (mr *MockCommentEventFactoryMockRecorder) CreateCommentCreatedEvent(commentEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentCreatedEvent", reflect.TypeOf((*MockCommentEventFactory)(nil).CreateCommentCreatedEvent), commentEntity)
}

// CreateCommentUpdatedEvent mocks base method
func (m *MockCommentEventFactory) CreateCommentUpdatedEvent(commentEntity *entities.CommentEntity) contracts.CommentEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentUpdatedEvent", commentEntity)
	ret0, _ := ret[0].(contracts.CommentEvent)
	return ret0
}

// CreateCommentUpdatedEvent indicates an expected call of CreateCommentUpdatedEvent
func (mr *MockCommentEventFactoryMockRecorder) CreateCommentUpdatedEvent(commentEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentUpdatedEvent", reflect.TypeOf((*MockCommentEventFactory)(nil).CreateCommentUpdatedEvent), commentEntity)
}

// CreateCommentDeletedEvent mocks base method
func (m *MockCommentEventFactory) CreateCommentDeletedEvent(commentEntity *entities.CommentEntity) contracts.CommentEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentDeletedEvent", commentEntity)
	ret0, _ := ret[0].(contracts.CommentEvent)
	return ret0
}

// CreateCommentDeletedEvent indicates an expected call of CreateCommentDeletedEvent
func (mr *MockCommentEventFactoryMockRecorder) CreateCommentDeletedEvent(commentEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentDeletedEvent", reflect.TypeOf((*MockCommentEventFactory)(nil).CreateCommentDeletedEvent), commentEntity)
}
