// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/subject_resolver.go

// Package mocks is a generated GoMock package.
package mocks

import (
	errors "github.com/emelnychenko/go-press/errors"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSubjectResolver is a mock of SubjectResolver interface
type MockSubjectResolver struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectResolverMockRecorder
}

// MockSubjectResolverMockRecorder is the mock recorder for MockSubjectResolver
type MockSubjectResolverMockRecorder struct {
	mock *MockSubjectResolver
}

// NewMockSubjectResolver creates a new mock instance
func NewMockSubjectResolver(ctrl *gomock.Controller) *MockSubjectResolver {
	mock := &MockSubjectResolver{ctrl: ctrl}
	mock.recorder = &MockSubjectResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubjectResolver) EXPECT() *MockSubjectResolverMockRecorder {
	return m.recorder
}

// ResolveSubject mocks base method
func (m *MockSubjectResolver) ResolveSubject(subjectId *models.SubjectId, subjectType models.SubjectType) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveSubject", subjectId, subjectType)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ResolveSubject indicates an expected call of ResolveSubject
func (mr *MockSubjectResolverMockRecorder) ResolveSubject(subjectId, subjectType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveSubject", reflect.TypeOf((*MockSubjectResolver)(nil).ResolveSubject), subjectId, subjectType)
}
