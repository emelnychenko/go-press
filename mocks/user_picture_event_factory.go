// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/user_picture_event_factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	contracts "github.com/emelnychenko/go-press/contracts"
	entities "github.com/emelnychenko/go-press/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserPictureEventFactory is a mock of UserPictureEventFactory interface
type MockUserPictureEventFactory struct {
	ctrl     *gomock.Controller
	recorder *MockUserPictureEventFactoryMockRecorder
}

// MockUserPictureEventFactoryMockRecorder is the mock recorder for MockUserPictureEventFactory
type MockUserPictureEventFactoryMockRecorder struct {
	mock *MockUserPictureEventFactory
}

// NewMockUserPictureEventFactory creates a new mock instance
func NewMockUserPictureEventFactory(ctrl *gomock.Controller) *MockUserPictureEventFactory {
	mock := &MockUserPictureEventFactory{ctrl: ctrl}
	mock.recorder = &MockUserPictureEventFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserPictureEventFactory) EXPECT() *MockUserPictureEventFactoryMockRecorder {
	return m.recorder
}

// CreateUserPictureChangedEvent mocks base method
func (m *MockUserPictureEventFactory) CreateUserPictureChangedEvent(userEntity *entities.UserEntity, userPictureEntity *entities.FileEntity) contracts.UserPictureEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPictureChangedEvent", userEntity, userPictureEntity)
	ret0, _ := ret[0].(contracts.UserPictureEvent)
	return ret0
}

// CreateUserPictureChangedEvent indicates an expected call of CreateUserPictureChangedEvent
func (mr *MockUserPictureEventFactoryMockRecorder) CreateUserPictureChangedEvent(userEntity, userPictureEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPictureChangedEvent", reflect.TypeOf((*MockUserPictureEventFactory)(nil).CreateUserPictureChangedEvent), userEntity, userPictureEntity)
}

// CreateUserPictureRemovedEvent mocks base method
func (m *MockUserPictureEventFactory) CreateUserPictureRemovedEvent(userEntity *entities.UserEntity) contracts.UserPictureEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPictureRemovedEvent", userEntity)
	ret0, _ := ret[0].(contracts.UserPictureEvent)
	return ret0
}

// CreateUserPictureRemovedEvent indicates an expected call of CreateUserPictureRemovedEvent
func (mr *MockUserPictureEventFactoryMockRecorder) CreateUserPictureRemovedEvent(userEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPictureRemovedEvent", reflect.TypeOf((*MockUserPictureEventFactory)(nil).CreateUserPictureRemovedEvent), userEntity)
}
