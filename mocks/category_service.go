// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/category_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/emelnychenko/go-press/common"
	entities "github.com/emelnychenko/go-press/entities"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCategoryService is a mock of CategoryService interface
type MockCategoryService struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryServiceMockRecorder
}

// MockCategoryServiceMockRecorder is the mock recorder for MockCategoryService
type MockCategoryServiceMockRecorder struct {
	mock *MockCategoryService
}

// NewMockCategoryService creates a new mock instance
func NewMockCategoryService(ctrl *gomock.Controller) *MockCategoryService {
	mock := &MockCategoryService{ctrl: ctrl}
	mock.recorder = &MockCategoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCategoryService) EXPECT() *MockCategoryServiceMockRecorder {
	return m.recorder
}

// ListCategories mocks base method
func (m *MockCategoryService) ListCategories(categoryPaginationQuery *models.CategoryPaginationQuery) (*models.PaginationResult, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", categoryPaginationQuery)
	ret0, _ := ret[0].(*models.PaginationResult)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories
func (mr *MockCategoryServiceMockRecorder) ListCategories(categoryPaginationQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockCategoryService)(nil).ListCategories), categoryPaginationQuery)
}

// GetCategoriesTree mocks base method
func (m *MockCategoryService) GetCategoriesTree() (*entities.CategoryEntityTree, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoriesTree")
	ret0, _ := ret[0].(*entities.CategoryEntityTree)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetCategoriesTree indicates an expected call of GetCategoriesTree
func (mr *MockCategoryServiceMockRecorder) GetCategoriesTree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoriesTree", reflect.TypeOf((*MockCategoryService)(nil).GetCategoriesTree))
}

// GetCategory mocks base method
func (m *MockCategoryService) GetCategory(categoryId *models.CategoryId) (*entities.CategoryEntity, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", categoryId)
	ret0, _ := ret[0].(*entities.CategoryEntity)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory
func (mr *MockCategoryServiceMockRecorder) GetCategory(categoryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockCategoryService)(nil).GetCategory), categoryId)
}

// GetCategoryTree mocks base method
func (m *MockCategoryService) GetCategoryTree(categoryId *models.CategoryId) (*entities.CategoryEntityTree, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryTree", categoryId)
	ret0, _ := ret[0].(*entities.CategoryEntityTree)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetCategoryTree indicates an expected call of GetCategoryTree
func (mr *MockCategoryServiceMockRecorder) GetCategoryTree(categoryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryTree", reflect.TypeOf((*MockCategoryService)(nil).GetCategoryTree), categoryId)
}

// CreateCategory mocks base method
func (m *MockCategoryService) CreateCategory(data *models.CategoryCreate) (*entities.CategoryEntity, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", data)
	ret0, _ := ret[0].(*entities.CategoryEntity)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory
func (mr *MockCategoryServiceMockRecorder) CreateCategory(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryService)(nil).CreateCategory), data)
}

// UpdateCategory mocks base method
func (m *MockCategoryService) UpdateCategory(categoryEntity *entities.CategoryEntity, data *models.CategoryUpdate) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", categoryEntity, data)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory
func (mr *MockCategoryServiceMockRecorder) UpdateCategory(categoryEntity, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockCategoryService)(nil).UpdateCategory), categoryEntity, data)
}

// ChangeCategoryParent mocks base method
func (m *MockCategoryService) ChangeCategoryParent(categoryEntity, parentCategoryEntity *entities.CategoryEntity) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCategoryParent", categoryEntity, parentCategoryEntity)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// ChangeCategoryParent indicates an expected call of ChangeCategoryParent
func (mr *MockCategoryServiceMockRecorder) ChangeCategoryParent(categoryEntity, parentCategoryEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCategoryParent", reflect.TypeOf((*MockCategoryService)(nil).ChangeCategoryParent), categoryEntity, parentCategoryEntity)
}

// RemoveCategoryParent mocks base method
func (m *MockCategoryService) RemoveCategoryParent(categoryEntity *entities.CategoryEntity) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCategoryParent", categoryEntity)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// RemoveCategoryParent indicates an expected call of RemoveCategoryParent
func (mr *MockCategoryServiceMockRecorder) RemoveCategoryParent(categoryEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCategoryParent", reflect.TypeOf((*MockCategoryService)(nil).RemoveCategoryParent), categoryEntity)
}

// DeleteCategory mocks base method
func (m *MockCategoryService) DeleteCategory(categoryEntity *entities.CategoryEntity) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", categoryEntity)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory
func (mr *MockCategoryServiceMockRecorder) DeleteCategory(categoryEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCategoryService)(nil).DeleteCategory), categoryEntity)
}
