// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/post_publisher_worker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/emelnychenko/go-press/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostPublisherWorker is a mock of PostPublisherWorker interface
type MockPostPublisherWorker struct {
	ctrl     *gomock.Controller
	recorder *MockPostPublisherWorkerMockRecorder
}

// MockPostPublisherWorkerMockRecorder is the mock recorder for MockPostPublisherWorker
type MockPostPublisherWorkerMockRecorder struct {
	mock *MockPostPublisherWorker
}

// NewMockPostPublisherWorker creates a new mock instance
func NewMockPostPublisherWorker(ctrl *gomock.Controller) *MockPostPublisherWorker {
	mock := &MockPostPublisherWorker{ctrl: ctrl}
	mock.recorder = &MockPostPublisherWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostPublisherWorker) EXPECT() *MockPostPublisherWorkerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockPostPublisherWorker) Start() common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockPostPublisherWorkerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPostPublisherWorker)(nil).Start))
}

// Stop mocks base method
func (m *MockPostPublisherWorker) Stop() common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockPostPublisherWorkerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPostPublisherWorker)(nil).Stop))
}
