// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/channel_model_factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChannelModelFactory is a mock of ChannelModelFactory interface
type MockChannelModelFactory struct {
	ctrl     *gomock.Controller
	recorder *MockChannelModelFactoryMockRecorder
}

// MockChannelModelFactoryMockRecorder is the mock recorder for MockChannelModelFactory
type MockChannelModelFactoryMockRecorder struct {
	mock *MockChannelModelFactory
}

// NewMockChannelModelFactory creates a new mock instance
func NewMockChannelModelFactory(ctrl *gomock.Controller) *MockChannelModelFactory {
	mock := &MockChannelModelFactory{ctrl: ctrl}
	mock.recorder = &MockChannelModelFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChannelModelFactory) EXPECT() *MockChannelModelFactoryMockRecorder {
	return m.recorder
}

// CreateChannelPaginationQuery mocks base method
func (m *MockChannelModelFactory) CreateChannelPaginationQuery() *models.ChannelPaginationQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelPaginationQuery")
	ret0, _ := ret[0].(*models.ChannelPaginationQuery)
	return ret0
}

// CreateChannelPaginationQuery indicates an expected call of CreateChannelPaginationQuery
func (mr *MockChannelModelFactoryMockRecorder) CreateChannelPaginationQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelPaginationQuery", reflect.TypeOf((*MockChannelModelFactory)(nil).CreateChannelPaginationQuery))
}

// CreateChannel mocks base method
func (m *MockChannelModelFactory) CreateChannel() *models.Channel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel")
	ret0, _ := ret[0].(*models.Channel)
	return ret0
}

// CreateChannel indicates an expected call of CreateChannel
func (mr *MockChannelModelFactoryMockRecorder) CreateChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockChannelModelFactory)(nil).CreateChannel))
}

// CreateChannelCreate mocks base method
func (m *MockChannelModelFactory) CreateChannelCreate() *models.ChannelCreate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelCreate")
	ret0, _ := ret[0].(*models.ChannelCreate)
	return ret0
}

// CreateChannelCreate indicates an expected call of CreateChannelCreate
func (mr *MockChannelModelFactoryMockRecorder) CreateChannelCreate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelCreate", reflect.TypeOf((*MockChannelModelFactory)(nil).CreateChannelCreate))
}

// CreateChannelUpdate mocks base method
func (m *MockChannelModelFactory) CreateChannelUpdate() *models.ChannelUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelUpdate")
	ret0, _ := ret[0].(*models.ChannelUpdate)
	return ret0
}

// CreateChannelUpdate indicates an expected call of CreateChannelUpdate
func (mr *MockChannelModelFactoryMockRecorder) CreateChannelUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelUpdate", reflect.TypeOf((*MockChannelModelFactory)(nil).CreateChannelUpdate))
}
