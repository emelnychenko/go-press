// Code generated by MockGen. DO NOT EDIT.
// Source: models/object.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockObject is a mock of Object interface
type MockObject struct {
	ctrl     *gomock.Controller
	recorder *MockObjectMockRecorder
}

// MockObjectMockRecorder is the mock recorder for MockObject
type MockObjectMockRecorder struct {
	mock *MockObject
}

// NewMockObject creates a new mock instance
func NewMockObject(ctrl *gomock.Controller) *MockObject {
	mock := &MockObject{ctrl: ctrl}
	mock.recorder = &MockObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObject) EXPECT() *MockObjectMockRecorder {
	return m.recorder
}

// ObjectId mocks base method
func (m *MockObject) ObjectId() *models.ObjectId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectId")
	ret0, _ := ret[0].(*models.ObjectId)
	return ret0
}

// ObjectId indicates an expected call of ObjectId
func (mr *MockObjectMockRecorder) ObjectId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectId", reflect.TypeOf((*MockObject)(nil).ObjectId))
}

// ObjectType mocks base method
func (m *MockObject) ObjectType() models.ObjectType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectType")
	ret0, _ := ret[0].(models.ObjectType)
	return ret0
}

// ObjectType indicates an expected call of ObjectType
func (mr *MockObjectMockRecorder) ObjectType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectType", reflect.TypeOf((*MockObject)(nil).ObjectType))
}
