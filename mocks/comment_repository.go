// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/comment_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "github.com/emelnychenko/go-press/entities"
	errors "github.com/emelnychenko/go-press/errors"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommentRepository is a mock of CommentRepository interface
type MockCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryMockRecorder
}

// MockCommentRepositoryMockRecorder is the mock recorder for MockCommentRepository
type MockCommentRepositoryMockRecorder struct {
	mock *MockCommentRepository
}

// NewMockCommentRepository creates a new mock instance
func NewMockCommentRepository(ctrl *gomock.Controller) *MockCommentRepository {
	mock := &MockCommentRepository{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommentRepository) EXPECT() *MockCommentRepositoryMockRecorder {
	return m.recorder
}

// ListComments mocks base method
func (m *MockCommentRepository) ListComments(commentPaginationQuery *models.CommentPaginationQuery) (*models.PaginationResult, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComments", commentPaginationQuery)
	ret0, _ := ret[0].(*models.PaginationResult)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ListComments indicates an expected call of ListComments
func (mr *MockCommentRepositoryMockRecorder) ListComments(commentPaginationQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComments", reflect.TypeOf((*MockCommentRepository)(nil).ListComments), commentPaginationQuery)
}

// GetComment mocks base method
func (m *MockCommentRepository) GetComment(commentId *models.CommentId) (*entities.CommentEntity, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", commentId)
	ret0, _ := ret[0].(*entities.CommentEntity)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment
func (mr *MockCommentRepositoryMockRecorder) GetComment(commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockCommentRepository)(nil).GetComment), commentId)
}

// SaveComment mocks base method
func (m *MockCommentRepository) SaveComment(commentEntity *entities.CommentEntity) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveComment", commentEntity)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// SaveComment indicates an expected call of SaveComment
func (mr *MockCommentRepositoryMockRecorder) SaveComment(commentEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveComment", reflect.TypeOf((*MockCommentRepository)(nil).SaveComment), commentEntity)
}

// RemoveComment mocks base method
func (m *MockCommentRepository) RemoveComment(commentEntity *entities.CommentEntity) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveComment", commentEntity)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// RemoveComment indicates an expected call of RemoveComment
func (mr *MockCommentRepositoryMockRecorder) RemoveComment(commentEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveComment", reflect.TypeOf((*MockCommentRepository)(nil).RemoveComment), commentEntity)
}
