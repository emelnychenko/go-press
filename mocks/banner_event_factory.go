// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/banner_event_factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	contracts "github.com/emelnychenko/go-press/contracts"
	entities "github.com/emelnychenko/go-press/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBannerEventFactory is a mock of BannerEventFactory interface
type MockBannerEventFactory struct {
	ctrl     *gomock.Controller
	recorder *MockBannerEventFactoryMockRecorder
}

// MockBannerEventFactoryMockRecorder is the mock recorder for MockBannerEventFactory
type MockBannerEventFactoryMockRecorder struct {
	mock *MockBannerEventFactory
}

// NewMockBannerEventFactory creates a new mock instance
func NewMockBannerEventFactory(ctrl *gomock.Controller) *MockBannerEventFactory {
	mock := &MockBannerEventFactory{ctrl: ctrl}
	mock.recorder = &MockBannerEventFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBannerEventFactory) EXPECT() *MockBannerEventFactoryMockRecorder {
	return m.recorder
}

// CreateBannerCreatedEvent mocks base method
func (m *MockBannerEventFactory) CreateBannerCreatedEvent(bannerEntity *entities.BannerEntity) contracts.BannerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBannerCreatedEvent", bannerEntity)
	ret0, _ := ret[0].(contracts.BannerEvent)
	return ret0
}

// CreateBannerCreatedEvent indicates an expected call of CreateBannerCreatedEvent
func (mr *MockBannerEventFactoryMockRecorder) CreateBannerCreatedEvent(bannerEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBannerCreatedEvent", reflect.TypeOf((*MockBannerEventFactory)(nil).CreateBannerCreatedEvent), bannerEntity)
}

// CreateBannerUpdatedEvent mocks base method
func (m *MockBannerEventFactory) CreateBannerUpdatedEvent(bannerEntity *entities.BannerEntity) contracts.BannerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBannerUpdatedEvent", bannerEntity)
	ret0, _ := ret[0].(contracts.BannerEvent)
	return ret0
}

// CreateBannerUpdatedEvent indicates an expected call of CreateBannerUpdatedEvent
func (mr *MockBannerEventFactoryMockRecorder) CreateBannerUpdatedEvent(bannerEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBannerUpdatedEvent", reflect.TypeOf((*MockBannerEventFactory)(nil).CreateBannerUpdatedEvent), bannerEntity)
}

// CreateBannerDeletedEvent mocks base method
func (m *MockBannerEventFactory) CreateBannerDeletedEvent(bannerEntity *entities.BannerEntity) contracts.BannerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBannerDeletedEvent", bannerEntity)
	ret0, _ := ret[0].(contracts.BannerEvent)
	return ret0
}

// CreateBannerDeletedEvent indicates an expected call of CreateBannerDeletedEvent
func (mr *MockBannerEventFactoryMockRecorder) CreateBannerDeletedEvent(bannerEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBannerDeletedEvent", reflect.TypeOf((*MockBannerEventFactory)(nil).CreateBannerDeletedEvent), bannerEntity)
}
