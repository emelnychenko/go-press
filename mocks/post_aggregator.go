// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/post_aggregator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "github.com/emelnychenko/go-press/entities"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostAggregator is a mock of PostAggregator interface
type MockPostAggregator struct {
	ctrl     *gomock.Controller
	recorder *MockPostAggregatorMockRecorder
}

// MockPostAggregatorMockRecorder is the mock recorder for MockPostAggregator
type MockPostAggregatorMockRecorder struct {
	mock *MockPostAggregator
}

// NewMockPostAggregator creates a new mock instance
func NewMockPostAggregator(ctrl *gomock.Controller) *MockPostAggregator {
	mock := &MockPostAggregator{ctrl: ctrl}
	mock.recorder = &MockPostAggregatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostAggregator) EXPECT() *MockPostAggregatorMockRecorder {
	return m.recorder
}

// AggregatePost mocks base method
func (m *MockPostAggregator) AggregatePost(postEntity *entities.PostEntity) *models.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregatePost", postEntity)
	ret0, _ := ret[0].(*models.Post)
	return ret0
}

// AggregatePost indicates an expected call of AggregatePost
func (mr *MockPostAggregatorMockRecorder) AggregatePost(postEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatePost", reflect.TypeOf((*MockPostAggregator)(nil).AggregatePost), postEntity)
}

// AggregatePosts mocks base method
func (m *MockPostAggregator) AggregatePosts(postEntities []*entities.PostEntity) []*models.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregatePosts", postEntities)
	ret0, _ := ret[0].([]*models.Post)
	return ret0
}

// AggregatePosts indicates an expected call of AggregatePosts
func (mr *MockPostAggregatorMockRecorder) AggregatePosts(postEntities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatePosts", reflect.TypeOf((*MockPostAggregator)(nil).AggregatePosts), postEntities)
}

// AggregatePaginationResult mocks base method
func (m *MockPostAggregator) AggregatePaginationResult(entityPaginationResult *models.PaginationResult) *models.PaginationResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregatePaginationResult", entityPaginationResult)
	ret0, _ := ret[0].(*models.PaginationResult)
	return ret0
}

// AggregatePaginationResult indicates an expected call of AggregatePaginationResult
func (mr *MockPostAggregatorMockRecorder) AggregatePaginationResult(entityPaginationResult interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatePaginationResult", reflect.TypeOf((*MockPostAggregator)(nil).AggregatePaginationResult), entityPaginationResult)
}
