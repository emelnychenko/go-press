// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/post_video_event_factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	contracts "github.com/emelnychenko/go-press/contracts"
	entities "github.com/emelnychenko/go-press/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostVideoEventFactory is a mock of PostVideoEventFactory interface
type MockPostVideoEventFactory struct {
	ctrl     *gomock.Controller
	recorder *MockPostVideoEventFactoryMockRecorder
}

// MockPostVideoEventFactoryMockRecorder is the mock recorder for MockPostVideoEventFactory
type MockPostVideoEventFactoryMockRecorder struct {
	mock *MockPostVideoEventFactory
}

// NewMockPostVideoEventFactory creates a new mock instance
func NewMockPostVideoEventFactory(ctrl *gomock.Controller) *MockPostVideoEventFactory {
	mock := &MockPostVideoEventFactory{ctrl: ctrl}
	mock.recorder = &MockPostVideoEventFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostVideoEventFactory) EXPECT() *MockPostVideoEventFactoryMockRecorder {
	return m.recorder
}

// CreatePostVideoChangedEvent mocks base method
func (m *MockPostVideoEventFactory) CreatePostVideoChangedEvent(postEntity *entities.PostEntity, postVideo *entities.FileEntity) contracts.PostVideoEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostVideoChangedEvent", postEntity, postVideo)
	ret0, _ := ret[0].(contracts.PostVideoEvent)
	return ret0
}

// CreatePostVideoChangedEvent indicates an expected call of CreatePostVideoChangedEvent
func (mr *MockPostVideoEventFactoryMockRecorder) CreatePostVideoChangedEvent(postEntity, postVideo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostVideoChangedEvent", reflect.TypeOf((*MockPostVideoEventFactory)(nil).CreatePostVideoChangedEvent), postEntity, postVideo)
}

// CreatePostVideoRemovedEvent mocks base method
func (m *MockPostVideoEventFactory) CreatePostVideoRemovedEvent(postEntity *entities.PostEntity) contracts.PostVideoEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostVideoRemovedEvent", postEntity)
	ret0, _ := ret[0].(contracts.PostVideoEvent)
	return ret0
}

// CreatePostVideoRemovedEvent indicates an expected call of CreatePostVideoRemovedEvent
func (mr *MockPostVideoEventFactoryMockRecorder) CreatePostVideoRemovedEvent(postEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostVideoRemovedEvent", reflect.TypeOf((*MockPostVideoEventFactory)(nil).CreatePostVideoRemovedEvent), postEntity)
}
