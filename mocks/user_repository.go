// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/user_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/emelnychenko/go-press/common"
	entities "github.com/emelnychenko/go-press/entities"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// ListUsers mocks base method
func (m *MockUserRepository) ListUsers(userPaginationQuery *models.UserPaginationQuery) (*models.PaginationResult, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", userPaginationQuery)
	ret0, _ := ret[0].(*models.PaginationResult)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers
func (mr *MockUserRepositoryMockRecorder) ListUsers(userPaginationQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserRepository)(nil).ListUsers), userPaginationQuery)
}

// GetUser mocks base method
func (m *MockUserRepository) GetUser(userId *models.UserId) (*entities.UserEntity, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userId)
	ret0, _ := ret[0].(*entities.UserEntity)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserRepositoryMockRecorder) GetUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), userId)
}

// LookupUser mocks base method
func (m *MockUserRepository) LookupUser(userIdentity string) (*entities.UserEntity, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupUser", userIdentity)
	ret0, _ := ret[0].(*entities.UserEntity)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// LookupUser indicates an expected call of LookupUser
func (mr *MockUserRepositoryMockRecorder) LookupUser(userIdentity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupUser", reflect.TypeOf((*MockUserRepository)(nil).LookupUser), userIdentity)
}

// SaveUser mocks base method
func (m *MockUserRepository) SaveUser(userEntity *entities.UserEntity) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", userEntity)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser
func (mr *MockUserRepositoryMockRecorder) SaveUser(userEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUserRepository)(nil).SaveUser), userEntity)
}

// RemoveUser mocks base method
func (m *MockUserRepository) RemoveUser(userEntity *entities.UserEntity) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", userEntity)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser
func (mr *MockUserRepositoryMockRecorder) RemoveUser(userEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockUserRepository)(nil).RemoveUser), userEntity)
}
