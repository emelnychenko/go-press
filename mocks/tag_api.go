// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/tag_api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/emelnychenko/go-press/common"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTagApi is a mock of TagApi interface
type MockTagApi struct {
	ctrl     *gomock.Controller
	recorder *MockTagApiMockRecorder
}

// MockTagApiMockRecorder is the mock recorder for MockTagApi
type MockTagApiMockRecorder struct {
	mock *MockTagApi
}

// NewMockTagApi creates a new mock instance
func NewMockTagApi(ctrl *gomock.Controller) *MockTagApi {
	mock := &MockTagApi{ctrl: ctrl}
	mock.recorder = &MockTagApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTagApi) EXPECT() *MockTagApiMockRecorder {
	return m.recorder
}

// ListTags mocks base method
func (m *MockTagApi) ListTags(tagPaginationQuery *models.TagPaginationQuery) (*models.PaginationResult, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", tagPaginationQuery)
	ret0, _ := ret[0].(*models.PaginationResult)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags
func (mr *MockTagApiMockRecorder) ListTags(tagPaginationQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockTagApi)(nil).ListTags), tagPaginationQuery)
}

// GetTag mocks base method
func (m *MockTagApi) GetTag(tagId *models.TagId) (*models.Tag, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", tagId)
	ret0, _ := ret[0].(*models.Tag)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag
func (mr *MockTagApiMockRecorder) GetTag(tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockTagApi)(nil).GetTag), tagId)
}

// CreateTag mocks base method
func (m *MockTagApi) CreateTag(data *models.TagCreate) (*models.Tag, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", data)
	ret0, _ := ret[0].(*models.Tag)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag
func (mr *MockTagApiMockRecorder) CreateTag(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockTagApi)(nil).CreateTag), data)
}

// UpdateTag mocks base method
func (m *MockTagApi) UpdateTag(tagId *models.TagId, data *models.TagUpdate) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", tagId, data)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// UpdateTag indicates an expected call of UpdateTag
func (mr *MockTagApiMockRecorder) UpdateTag(tagId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockTagApi)(nil).UpdateTag), tagId, data)
}

// DeleteTag mocks base method
func (m *MockTagApi) DeleteTag(tagId *models.TagId) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", tagId)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag
func (mr *MockTagApiMockRecorder) DeleteTag(tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockTagApi)(nil).DeleteTag), tagId)
}
