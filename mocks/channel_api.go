// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/channel_api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	errors "github.com/emelnychenko/go-press/errors"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChannelApi is a mock of ChannelApi interface
type MockChannelApi struct {
	ctrl     *gomock.Controller
	recorder *MockChannelApiMockRecorder
}

// MockChannelApiMockRecorder is the mock recorder for MockChannelApi
type MockChannelApiMockRecorder struct {
	mock *MockChannelApi
}

// NewMockChannelApi creates a new mock instance
func NewMockChannelApi(ctrl *gomock.Controller) *MockChannelApi {
	mock := &MockChannelApi{ctrl: ctrl}
	mock.recorder = &MockChannelApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChannelApi) EXPECT() *MockChannelApiMockRecorder {
	return m.recorder
}

// ListChannels mocks base method
func (m *MockChannelApi) ListChannels(channelPaginationQuery *models.ChannelPaginationQuery) (*models.PaginationResult, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannels", channelPaginationQuery)
	ret0, _ := ret[0].(*models.PaginationResult)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ListChannels indicates an expected call of ListChannels
func (mr *MockChannelApiMockRecorder) ListChannels(channelPaginationQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannels", reflect.TypeOf((*MockChannelApi)(nil).ListChannels), channelPaginationQuery)
}

// GetChannel mocks base method
func (m *MockChannelApi) GetChannel(channelId *models.ChannelId) (*models.Channel, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", channelId)
	ret0, _ := ret[0].(*models.Channel)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel
func (mr *MockChannelApiMockRecorder) GetChannel(channelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockChannelApi)(nil).GetChannel), channelId)
}

// CreateChannel mocks base method
func (m *MockChannelApi) CreateChannel(data *models.ChannelCreate) (*models.Channel, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", data)
	ret0, _ := ret[0].(*models.Channel)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel
func (mr *MockChannelApiMockRecorder) CreateChannel(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockChannelApi)(nil).CreateChannel), data)
}

// UpdateChannel mocks base method
func (m *MockChannelApi) UpdateChannel(channelId *models.ChannelId, data *models.ChannelUpdate) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", channelId, data)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// UpdateChannel indicates an expected call of UpdateChannel
func (mr *MockChannelApiMockRecorder) UpdateChannel(channelId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockChannelApi)(nil).UpdateChannel), channelId, data)
}

// DeleteChannel mocks base method
func (m *MockChannelApi) DeleteChannel(channelId *models.ChannelId) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", channelId)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// DeleteChannel indicates an expected call of DeleteChannel
func (mr *MockChannelApiMockRecorder) DeleteChannel(channelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockChannelApi)(nil).DeleteChannel), channelId)
}
