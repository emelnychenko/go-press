// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/banner_api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	errors "github.com/emelnychenko/go-press/errors"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBannerApi is a mock of BannerApi interface
type MockBannerApi struct {
	ctrl     *gomock.Controller
	recorder *MockBannerApiMockRecorder
}

// MockBannerApiMockRecorder is the mock recorder for MockBannerApi
type MockBannerApiMockRecorder struct {
	mock *MockBannerApi
}

// NewMockBannerApi creates a new mock instance
func NewMockBannerApi(ctrl *gomock.Controller) *MockBannerApi {
	mock := &MockBannerApi{ctrl: ctrl}
	mock.recorder = &MockBannerApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBannerApi) EXPECT() *MockBannerApiMockRecorder {
	return m.recorder
}

// ListBanners mocks base method
func (m *MockBannerApi) ListBanners(bannerPaginationQuery *models.BannerPaginationQuery) (*models.PaginationResult, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBanners", bannerPaginationQuery)
	ret0, _ := ret[0].(*models.PaginationResult)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ListBanners indicates an expected call of ListBanners
func (mr *MockBannerApiMockRecorder) ListBanners(bannerPaginationQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBanners", reflect.TypeOf((*MockBannerApi)(nil).ListBanners), bannerPaginationQuery)
}

// GetBanner mocks base method
func (m *MockBannerApi) GetBanner(bannerId *models.BannerId) (*models.Banner, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanner", bannerId)
	ret0, _ := ret[0].(*models.Banner)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// GetBanner indicates an expected call of GetBanner
func (mr *MockBannerApiMockRecorder) GetBanner(bannerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanner", reflect.TypeOf((*MockBannerApi)(nil).GetBanner), bannerId)
}

// CreateBanner mocks base method
func (m *MockBannerApi) CreateBanner(data *models.BannerCreate) (*models.Banner, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBanner", data)
	ret0, _ := ret[0].(*models.Banner)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// CreateBanner indicates an expected call of CreateBanner
func (mr *MockBannerApiMockRecorder) CreateBanner(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBanner", reflect.TypeOf((*MockBannerApi)(nil).CreateBanner), data)
}

// UpdateBanner mocks base method
func (m *MockBannerApi) UpdateBanner(bannerId *models.BannerId, data *models.BannerUpdate) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBanner", bannerId, data)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// UpdateBanner indicates an expected call of UpdateBanner
func (mr *MockBannerApiMockRecorder) UpdateBanner(bannerId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBanner", reflect.TypeOf((*MockBannerApi)(nil).UpdateBanner), bannerId, data)
}

// DeleteBanner mocks base method
func (m *MockBannerApi) DeleteBanner(bannerId *models.BannerId) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBanner", bannerId)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// DeleteBanner indicates an expected call of DeleteBanner
func (mr *MockBannerApiMockRecorder) DeleteBanner(bannerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBanner", reflect.TypeOf((*MockBannerApi)(nil).DeleteBanner), bannerId)
}
