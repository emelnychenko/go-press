// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/poll_api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/emelnychenko/go-press/common"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPollApi is a mock of PollApi interface
type MockPollApi struct {
	ctrl     *gomock.Controller
	recorder *MockPollApiMockRecorder
}

// MockPollApiMockRecorder is the mock recorder for MockPollApi
type MockPollApiMockRecorder struct {
	mock *MockPollApi
}

// NewMockPollApi creates a new mock instance
func NewMockPollApi(ctrl *gomock.Controller) *MockPollApi {
	mock := &MockPollApi{ctrl: ctrl}
	mock.recorder = &MockPollApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPollApi) EXPECT() *MockPollApiMockRecorder {
	return m.recorder
}

// ListPolls mocks base method
func (m *MockPollApi) ListPolls(pollPaginationQuery *models.PollPaginationQuery) (*models.PaginationResult, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolls", pollPaginationQuery)
	ret0, _ := ret[0].(*models.PaginationResult)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// ListPolls indicates an expected call of ListPolls
func (mr *MockPollApiMockRecorder) ListPolls(pollPaginationQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolls", reflect.TypeOf((*MockPollApi)(nil).ListPolls), pollPaginationQuery)
}

// GetPoll mocks base method
func (m *MockPollApi) GetPoll(pollId *models.PollId) (*models.Poll, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoll", pollId)
	ret0, _ := ret[0].(*models.Poll)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetPoll indicates an expected call of GetPoll
func (mr *MockPollApiMockRecorder) GetPoll(pollId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoll", reflect.TypeOf((*MockPollApi)(nil).GetPoll), pollId)
}

// CreatePoll mocks base method
func (m *MockPollApi) CreatePoll(data *models.PollCreate) (*models.Poll, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePoll", data)
	ret0, _ := ret[0].(*models.Poll)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// CreatePoll indicates an expected call of CreatePoll
func (mr *MockPollApiMockRecorder) CreatePoll(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePoll", reflect.TypeOf((*MockPollApi)(nil).CreatePoll), data)
}

// UpdatePoll mocks base method
func (m *MockPollApi) UpdatePoll(pollId *models.PollId, data *models.PollUpdate) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePoll", pollId, data)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// UpdatePoll indicates an expected call of UpdatePoll
func (mr *MockPollApiMockRecorder) UpdatePoll(pollId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePoll", reflect.TypeOf((*MockPollApi)(nil).UpdatePoll), pollId, data)
}

// DeletePoll mocks base method
func (m *MockPollApi) DeletePoll(pollId *models.PollId) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePoll", pollId)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// DeletePoll indicates an expected call of DeletePoll
func (mr *MockPollApiMockRecorder) DeletePoll(pollId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoll", reflect.TypeOf((*MockPollApi)(nil).DeletePoll), pollId)
}
