// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/banner_http_helper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	contracts "github.com/emelnychenko/go-press/contracts"
	errors "github.com/emelnychenko/go-press/errors"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBannerHttpHelper is a mock of BannerHttpHelper interface
type MockBannerHttpHelper struct {
	ctrl     *gomock.Controller
	recorder *MockBannerHttpHelperMockRecorder
}

// MockBannerHttpHelperMockRecorder is the mock recorder for MockBannerHttpHelper
type MockBannerHttpHelperMockRecorder struct {
	mock *MockBannerHttpHelper
}

// NewMockBannerHttpHelper creates a new mock instance
func NewMockBannerHttpHelper(ctrl *gomock.Controller) *MockBannerHttpHelper {
	mock := &MockBannerHttpHelper{ctrl: ctrl}
	mock.recorder = &MockBannerHttpHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBannerHttpHelper) EXPECT() *MockBannerHttpHelperMockRecorder {
	return m.recorder
}

// ParseBannerId mocks base method
func (m *MockBannerHttpHelper) ParseBannerId(httpContext contracts.HttpContext) (*models.BannerId, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBannerId", httpContext)
	ret0, _ := ret[0].(*models.BannerId)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ParseBannerId indicates an expected call of ParseBannerId
func (mr *MockBannerHttpHelperMockRecorder) ParseBannerId(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBannerId", reflect.TypeOf((*MockBannerHttpHelper)(nil).ParseBannerId), httpContext)
}
