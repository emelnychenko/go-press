// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/tag_controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/emelnychenko/go-press/common"
	contracts "github.com/emelnychenko/go-press/contracts"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTagController is a mock of TagController interface
type MockTagController struct {
	ctrl     *gomock.Controller
	recorder *MockTagControllerMockRecorder
}

// MockTagControllerMockRecorder is the mock recorder for MockTagController
type MockTagControllerMockRecorder struct {
	mock *MockTagController
}

// NewMockTagController creates a new mock instance
func NewMockTagController(ctrl *gomock.Controller) *MockTagController {
	mock := &MockTagController{ctrl: ctrl}
	mock.recorder = &MockTagControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTagController) EXPECT() *MockTagControllerMockRecorder {
	return m.recorder
}

// ListTags mocks base method
func (m *MockTagController) ListTags(httpContext contracts.HttpContext) (interface{}, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags
func (mr *MockTagControllerMockRecorder) ListTags(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockTagController)(nil).ListTags), httpContext)
}

// GetTag mocks base method
func (m *MockTagController) GetTag(httpContext contracts.HttpContext) (interface{}, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag
func (mr *MockTagControllerMockRecorder) GetTag(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockTagController)(nil).GetTag), httpContext)
}

// CreateTag mocks base method
func (m *MockTagController) CreateTag(httpContext contracts.HttpContext) (interface{}, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag
func (mr *MockTagControllerMockRecorder) CreateTag(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockTagController)(nil).CreateTag), httpContext)
}

// UpdateTag mocks base method
func (m *MockTagController) UpdateTag(httpContext contracts.HttpContext) (interface{}, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag
func (mr *MockTagControllerMockRecorder) UpdateTag(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockTagController)(nil).UpdateTag), httpContext)
}

// DeleteTag mocks base method
func (m *MockTagController) DeleteTag(httpContext contracts.HttpContext) (interface{}, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// DeleteTag indicates an expected call of DeleteTag
func (mr *MockTagControllerMockRecorder) DeleteTag(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockTagController)(nil).DeleteTag), httpContext)
}
