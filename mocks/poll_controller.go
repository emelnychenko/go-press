// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/poll_controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	contracts "github.com/emelnychenko/go-press/contracts"
	errors "github.com/emelnychenko/go-press/errors"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPollController is a mock of PollController interface
type MockPollController struct {
	ctrl     *gomock.Controller
	recorder *MockPollControllerMockRecorder
}

// MockPollControllerMockRecorder is the mock recorder for MockPollController
type MockPollControllerMockRecorder struct {
	mock *MockPollController
}

// NewMockPollController creates a new mock instance
func NewMockPollController(ctrl *gomock.Controller) *MockPollController {
	mock := &MockPollController{ctrl: ctrl}
	mock.recorder = &MockPollControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPollController) EXPECT() *MockPollControllerMockRecorder {
	return m.recorder
}

// ListPolls mocks base method
func (m *MockPollController) ListPolls(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolls", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ListPolls indicates an expected call of ListPolls
func (mr *MockPollControllerMockRecorder) ListPolls(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolls", reflect.TypeOf((*MockPollController)(nil).ListPolls), httpContext)
}

// GetPoll mocks base method
func (m *MockPollController) GetPoll(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoll", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// GetPoll indicates an expected call of GetPoll
func (mr *MockPollControllerMockRecorder) GetPoll(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoll", reflect.TypeOf((*MockPollController)(nil).GetPoll), httpContext)
}

// CreatePoll mocks base method
func (m *MockPollController) CreatePoll(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePoll", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// CreatePoll indicates an expected call of CreatePoll
func (mr *MockPollControllerMockRecorder) CreatePoll(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePoll", reflect.TypeOf((*MockPollController)(nil).CreatePoll), httpContext)
}

// UpdatePoll mocks base method
func (m *MockPollController) UpdatePoll(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePoll", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// UpdatePoll indicates an expected call of UpdatePoll
func (mr *MockPollControllerMockRecorder) UpdatePoll(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePoll", reflect.TypeOf((*MockPollController)(nil).UpdatePoll), httpContext)
}

// DeletePoll mocks base method
func (m *MockPollController) DeletePoll(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePoll", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// DeletePoll indicates an expected call of DeletePoll
func (mr *MockPollControllerMockRecorder) DeletePoll(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoll", reflect.TypeOf((*MockPollController)(nil).DeletePoll), httpContext)
}
