// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/comment_aggregator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "github.com/emelnychenko/go-press/entities"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommentAggregator is a mock of CommentAggregator interface
type MockCommentAggregator struct {
	ctrl     *gomock.Controller
	recorder *MockCommentAggregatorMockRecorder
}

// MockCommentAggregatorMockRecorder is the mock recorder for MockCommentAggregator
type MockCommentAggregatorMockRecorder struct {
	mock *MockCommentAggregator
}

// NewMockCommentAggregator creates a new mock instance
func NewMockCommentAggregator(ctrl *gomock.Controller) *MockCommentAggregator {
	mock := &MockCommentAggregator{ctrl: ctrl}
	mock.recorder = &MockCommentAggregatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommentAggregator) EXPECT() *MockCommentAggregatorMockRecorder {
	return m.recorder
}

// AggregateComment mocks base method
func (m *MockCommentAggregator) AggregateComment(commentEntity *entities.CommentEntity) *models.Comment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateComment", commentEntity)
	ret0, _ := ret[0].(*models.Comment)
	return ret0
}

// AggregateComment indicates an expected call of AggregateComment
func (mr *MockCommentAggregatorMockRecorder) AggregateComment(commentEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateComment", reflect.TypeOf((*MockCommentAggregator)(nil).AggregateComment), commentEntity)
}

// AggregateComments mocks base method
func (m *MockCommentAggregator) AggregateComments(commentEntities []*entities.CommentEntity) []*models.Comment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateComments", commentEntities)
	ret0, _ := ret[0].([]*models.Comment)
	return ret0
}

// AggregateComments indicates an expected call of AggregateComments
func (mr *MockCommentAggregatorMockRecorder) AggregateComments(commentEntities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateComments", reflect.TypeOf((*MockCommentAggregator)(nil).AggregateComments), commentEntities)
}

// AggregatePaginationResult mocks base method
func (m *MockCommentAggregator) AggregatePaginationResult(entityPaginationResult *models.PaginationResult) *models.PaginationResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregatePaginationResult", entityPaginationResult)
	ret0, _ := ret[0].(*models.PaginationResult)
	return ret0
}

// AggregatePaginationResult indicates an expected call of AggregatePaginationResult
func (mr *MockCommentAggregatorMockRecorder) AggregatePaginationResult(entityPaginationResult interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatePaginationResult", reflect.TypeOf((*MockCommentAggregator)(nil).AggregatePaginationResult), entityPaginationResult)
}
