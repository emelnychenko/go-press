// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/file_echo_helper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	contracts "github.com/emelnychenko/go-press/contracts"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
	multipart "mime/multipart"
	reflect "reflect"
)

// MockFileEchoHelper is a mock of FileEchoHelper interface
type MockFileEchoHelper struct {
	ctrl     *gomock.Controller
	recorder *MockFileEchoHelperMockRecorder
}

// MockFileEchoHelperMockRecorder is the mock recorder for MockFileEchoHelper
type MockFileEchoHelperMockRecorder struct {
	mock *MockFileEchoHelper
}

// NewMockFileEchoHelper creates a new mock instance
func NewMockFileEchoHelper(ctrl *gomock.Controller) *MockFileEchoHelper {
	mock := &MockFileEchoHelper{ctrl: ctrl}
	mock.recorder = &MockFileEchoHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileEchoHelper) EXPECT() *MockFileEchoHelperMockRecorder {
	return m.recorder
}

// ParseId mocks base method
func (m *MockFileEchoHelper) ParseId(context echo.Context) (*models.FileId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseId", context)
	ret0, _ := ret[0].(*models.FileId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseId indicates an expected call of ParseId
func (mr *MockFileEchoHelperMockRecorder) ParseId(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseId", reflect.TypeOf((*MockFileEchoHelper)(nil).ParseId), context)
}

// GetFileHeader mocks base method
func (m *MockFileEchoHelper) GetFileHeader(context echo.Context) (*multipart.FileHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileHeader", context)
	ret0, _ := ret[0].(*multipart.FileHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileHeader indicates an expected call of GetFileHeader
func (mr *MockFileEchoHelperMockRecorder) GetFileHeader(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileHeader", reflect.TypeOf((*MockFileEchoHelper)(nil).GetFileHeader), context)
}

// OpenFormFile mocks base method
func (m *MockFileEchoHelper) OpenFormFile(formHeader *multipart.FileHeader) (multipart.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFormFile", formHeader)
	ret0, _ := ret[0].(multipart.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFormFile indicates an expected call of OpenFormFile
func (mr *MockFileEchoHelperMockRecorder) OpenFormFile(formHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFormFile", reflect.TypeOf((*MockFileEchoHelper)(nil).OpenFormFile), formHeader)
}

// PrepareFileDestination mocks base method
func (m *MockFileEchoHelper) PrepareFileDestination(context echo.Context) contracts.PrepareFileDestination {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareFileDestination", context)
	ret0, _ := ret[0].(contracts.PrepareFileDestination)
	return ret0
}

// PrepareFileDestination indicates an expected call of PrepareFileDestination
func (mr *MockFileEchoHelperMockRecorder) PrepareFileDestination(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareFileDestination", reflect.TypeOf((*MockFileEchoHelper)(nil).PrepareFileDestination), context)
}
