// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/category_api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/emelnychenko/go-press/common"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCategoryApi is a mock of CategoryApi interface
type MockCategoryApi struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryApiMockRecorder
}

// MockCategoryApiMockRecorder is the mock recorder for MockCategoryApi
type MockCategoryApiMockRecorder struct {
	mock *MockCategoryApi
}

// NewMockCategoryApi creates a new mock instance
func NewMockCategoryApi(ctrl *gomock.Controller) *MockCategoryApi {
	mock := &MockCategoryApi{ctrl: ctrl}
	mock.recorder = &MockCategoryApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCategoryApi) EXPECT() *MockCategoryApiMockRecorder {
	return m.recorder
}

// ListCategories mocks base method
func (m *MockCategoryApi) ListCategories(categoryPaginationQuery *models.CategoryPaginationQuery) (*models.PaginationResult, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", categoryPaginationQuery)
	ret0, _ := ret[0].(*models.PaginationResult)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories
func (mr *MockCategoryApiMockRecorder) ListCategories(categoryPaginationQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockCategoryApi)(nil).ListCategories), categoryPaginationQuery)
}

// GetCategory mocks base method
func (m *MockCategoryApi) GetCategory(categoryId *models.CategoryId) (*models.Category, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", categoryId)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory
func (mr *MockCategoryApiMockRecorder) GetCategory(categoryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockCategoryApi)(nil).GetCategory), categoryId)
}

// CreateCategory mocks base method
func (m *MockCategoryApi) CreateCategory(data *models.CategoryCreate) (*models.Category, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", data)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory
func (mr *MockCategoryApiMockRecorder) CreateCategory(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryApi)(nil).CreateCategory), data)
}

// UpdateCategory mocks base method
func (m *MockCategoryApi) UpdateCategory(categoryId *models.CategoryId, data *models.CategoryUpdate) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", categoryId, data)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory
func (mr *MockCategoryApiMockRecorder) UpdateCategory(categoryId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockCategoryApi)(nil).UpdateCategory), categoryId, data)
}

// DeleteCategory mocks base method
func (m *MockCategoryApi) DeleteCategory(categoryId *models.CategoryId) common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", categoryId)
	ret0, _ := ret[0].(common.Error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory
func (mr *MockCategoryApiMockRecorder) DeleteCategory(categoryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCategoryApi)(nil).DeleteCategory), categoryId)
}
