// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/post_author_controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	contracts "github.com/emelnychenko/go-press/contracts"
	errors "github.com/emelnychenko/go-press/errors"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostAuthorController is a mock of PostAuthorController interface
type MockPostAuthorController struct {
	ctrl     *gomock.Controller
	recorder *MockPostAuthorControllerMockRecorder
}

// MockPostAuthorControllerMockRecorder is the mock recorder for MockPostAuthorController
type MockPostAuthorControllerMockRecorder struct {
	mock *MockPostAuthorController
}

// NewMockPostAuthorController creates a new mock instance
func NewMockPostAuthorController(ctrl *gomock.Controller) *MockPostAuthorController {
	mock := &MockPostAuthorController{ctrl: ctrl}
	mock.recorder = &MockPostAuthorControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostAuthorController) EXPECT() *MockPostAuthorControllerMockRecorder {
	return m.recorder
}

// ChangePostAuthor mocks base method
func (m *MockPostAuthorController) ChangePostAuthor(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePostAuthor", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ChangePostAuthor indicates an expected call of ChangePostAuthor
func (mr *MockPostAuthorControllerMockRecorder) ChangePostAuthor(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePostAuthor", reflect.TypeOf((*MockPostAuthorController)(nil).ChangePostAuthor), httpContext)
}
