// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/user_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "github.com/emelnychenko/go-press/entities"
	errors "github.com/emelnychenko/go-press/errors"
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserService is a mock of UserService interface
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// ListUsers mocks base method
func (m *MockUserService) ListUsers(userPaginationQuery *models.UserPaginationQuery) (*models.PaginationResult, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", userPaginationQuery)
	ret0, _ := ret[0].(*models.PaginationResult)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers
func (mr *MockUserServiceMockRecorder) ListUsers(userPaginationQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserService)(nil).ListUsers), userPaginationQuery)
}

// GetUser mocks base method
func (m *MockUserService) GetUser(userId *models.UserId) (*entities.UserEntity, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userId)
	ret0, _ := ret[0].(*entities.UserEntity)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserServiceMockRecorder) GetUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserService)(nil).GetUser), userId)
}

// LookupUser mocks base method
func (m *MockUserService) LookupUser(userIdentity string) (*entities.UserEntity, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupUser", userIdentity)
	ret0, _ := ret[0].(*entities.UserEntity)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// LookupUser indicates an expected call of LookupUser
func (mr *MockUserServiceMockRecorder) LookupUser(userIdentity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupUser", reflect.TypeOf((*MockUserService)(nil).LookupUser), userIdentity)
}

// ChallengeUser mocks base method
func (m *MockUserService) ChallengeUser(userEntity *entities.UserEntity, password string) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChallengeUser", userEntity, password)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// ChallengeUser indicates an expected call of ChallengeUser
func (mr *MockUserServiceMockRecorder) ChallengeUser(userEntity, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChallengeUser", reflect.TypeOf((*MockUserService)(nil).ChallengeUser), userEntity, password)
}

// CreateUser mocks base method
func (m *MockUserService) CreateUser(data *models.UserCreate) (*entities.UserEntity, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", data)
	ret0, _ := ret[0].(*entities.UserEntity)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockUserServiceMockRecorder) CreateUser(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), data)
}

// VerifyUser mocks base method
func (m *MockUserService) VerifyUser(userEntity *entities.UserEntity) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", userEntity)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// VerifyUser indicates an expected call of VerifyUser
func (mr *MockUserServiceMockRecorder) VerifyUser(userEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockUserService)(nil).VerifyUser), userEntity)
}

// ChangeUserIdentity mocks base method
func (m *MockUserService) ChangeUserIdentity(userEntity *entities.UserEntity, data *models.UserChangeIdentity) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserIdentity", userEntity, data)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// ChangeUserIdentity indicates an expected call of ChangeUserIdentity
func (mr *MockUserServiceMockRecorder) ChangeUserIdentity(userEntity, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserIdentity", reflect.TypeOf((*MockUserService)(nil).ChangeUserIdentity), userEntity, data)
}

// ChangeUserPassword mocks base method
func (m *MockUserService) ChangeUserPassword(userEntity *entities.UserEntity, data *models.UserChangePassword) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPassword", userEntity, data)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// ChangeUserPassword indicates an expected call of ChangeUserPassword
func (mr *MockUserServiceMockRecorder) ChangeUserPassword(userEntity, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword", reflect.TypeOf((*MockUserService)(nil).ChangeUserPassword), userEntity, data)
}

// UpdateUser mocks base method
func (m *MockUserService) UpdateUser(userEntity *entities.UserEntity, data *models.UserUpdate) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", userEntity, data)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockUserServiceMockRecorder) UpdateUser(userEntity, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), userEntity, data)
}

// DeleteUser mocks base method
func (m *MockUserService) DeleteUser(userEntity *entities.UserEntity) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userEntity)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockUserServiceMockRecorder) DeleteUser(userEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), userEntity)
}
