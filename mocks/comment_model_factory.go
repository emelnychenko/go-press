// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/comment_model_factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/emelnychenko/go-press/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommentModelFactory is a mock of CommentModelFactory interface
type MockCommentModelFactory struct {
	ctrl     *gomock.Controller
	recorder *MockCommentModelFactoryMockRecorder
}

// MockCommentModelFactoryMockRecorder is the mock recorder for MockCommentModelFactory
type MockCommentModelFactoryMockRecorder struct {
	mock *MockCommentModelFactory
}

// NewMockCommentModelFactory creates a new mock instance
func NewMockCommentModelFactory(ctrl *gomock.Controller) *MockCommentModelFactory {
	mock := &MockCommentModelFactory{ctrl: ctrl}
	mock.recorder = &MockCommentModelFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommentModelFactory) EXPECT() *MockCommentModelFactoryMockRecorder {
	return m.recorder
}

// CreateCommentPaginationQuery mocks base method
func (m *MockCommentModelFactory) CreateCommentPaginationQuery() *models.CommentPaginationQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentPaginationQuery")
	ret0, _ := ret[0].(*models.CommentPaginationQuery)
	return ret0
}

// CreateCommentPaginationQuery indicates an expected call of CreateCommentPaginationQuery
func (mr *MockCommentModelFactoryMockRecorder) CreateCommentPaginationQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentPaginationQuery", reflect.TypeOf((*MockCommentModelFactory)(nil).CreateCommentPaginationQuery))
}

// CreateComment mocks base method
func (m *MockCommentModelFactory) CreateComment() *models.Comment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment")
	ret0, _ := ret[0].(*models.Comment)
	return ret0
}

// CreateComment indicates an expected call of CreateComment
func (mr *MockCommentModelFactoryMockRecorder) CreateComment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentModelFactory)(nil).CreateComment))
}

// CreateCommentCreate mocks base method
func (m *MockCommentModelFactory) CreateCommentCreate() *models.CommentCreate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentCreate")
	ret0, _ := ret[0].(*models.CommentCreate)
	return ret0
}

// CreateCommentCreate indicates an expected call of CreateCommentCreate
func (mr *MockCommentModelFactoryMockRecorder) CreateCommentCreate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentCreate", reflect.TypeOf((*MockCommentModelFactory)(nil).CreateCommentCreate))
}

// CreateCommentUpdate mocks base method
func (m *MockCommentModelFactory) CreateCommentUpdate() *models.CommentUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentUpdate")
	ret0, _ := ret[0].(*models.CommentUpdate)
	return ret0
}

// CreateCommentUpdate indicates an expected call of CreateCommentUpdate
func (mr *MockCommentModelFactoryMockRecorder) CreateCommentUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentUpdate", reflect.TypeOf((*MockCommentModelFactory)(nil).CreateCommentUpdate))
}
