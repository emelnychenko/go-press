// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/file_controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	contracts "github.com/emelnychenko/go-press/contracts"
	errors "github.com/emelnychenko/go-press/errors"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFileController is a mock of FileController interface
type MockFileController struct {
	ctrl     *gomock.Controller
	recorder *MockFileControllerMockRecorder
}

// MockFileControllerMockRecorder is the mock recorder for MockFileController
type MockFileControllerMockRecorder struct {
	mock *MockFileController
}

// NewMockFileController creates a new mock instance
func NewMockFileController(ctrl *gomock.Controller) *MockFileController {
	mock := &MockFileController{ctrl: ctrl}
	mock.recorder = &MockFileControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileController) EXPECT() *MockFileControllerMockRecorder {
	return m.recorder
}

// ListFiles mocks base method
func (m *MockFileController) ListFiles(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles
func (mr *MockFileControllerMockRecorder) ListFiles(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockFileController)(nil).ListFiles), httpContext)
}

// GetFile mocks base method
func (m *MockFileController) GetFile(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile
func (mr *MockFileControllerMockRecorder) GetFile(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockFileController)(nil).GetFile), httpContext)
}

// UploadFile mocks base method
func (m *MockFileController) UploadFile(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile
func (mr *MockFileControllerMockRecorder) UploadFile(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileController)(nil).UploadFile), httpContext)
}

// DownloadFile mocks base method
func (m *MockFileController) DownloadFile(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile
func (mr *MockFileControllerMockRecorder) DownloadFile(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFileController)(nil).DownloadFile), httpContext)
}

// UpdateFile mocks base method
func (m *MockFileController) UpdateFile(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFile", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// UpdateFile indicates an expected call of UpdateFile
func (mr *MockFileControllerMockRecorder) UpdateFile(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockFileController)(nil).UpdateFile), httpContext)
}

// DeleteFile mocks base method
func (m *MockFileController) DeleteFile(httpContext contracts.HttpContext) (interface{}, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", httpContext)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile
func (mr *MockFileControllerMockRecorder) DeleteFile(httpContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileController)(nil).DeleteFile), httpContext)
}
